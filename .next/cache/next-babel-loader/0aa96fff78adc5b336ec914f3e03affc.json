{"ast":null,"code":"var _jsxFileName = \"/Users/otnielvictoryfa/task2020/atur-tagihan/pages/login/index.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Router from 'next/router';\nimport GoogleLogin from 'react-google-login'; // material\n\nimport Button from '@material-ui/core/Button';\nimport Divider from '@material-ui/core/Divider'; // component\n\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport ButtonBack from '../../components/global-component/ButtonBack'; // redux\n\nimport { showSnackbar } from '../../redux/snackbar/action';\nimport { isNotUndefined } from '../../utils/Validator';\nimport { BlockDialog } from '../../components/global-component/BlockDialog';\nexport class Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: false\n    };\n  }\n\n  componentDidMount() {\n    document.body.style.background = 'white';\n  }\n  /**\n   *  @summary this method mapping google response and get token then post it to backend, if success\n   *  the response google data will be saved on local\n   *  BE do validating to token given\n   * */\n\n\n  async onSuccessLogin(responseGoogle) {\n    this.setState({\n      isLoading: true\n    });\n    const data = JSON.stringify({\n      access_token: responseGoogle.accessToken,\n      token_id: responseGoogle.tokenId\n    });\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n    const {\n      showSnackbar\n    } = this.props;\n    const BASE_URL = process.env.NEXT_PUBLIC_API_BASE_URL;\n    const url = `${BASE_URL}/customer/auth/social_login/google`;\n    await axios.post(url, data, {\n      headers\n    }).then(async apiResponse => {\n      const {\n        response,\n        result\n      } = apiResponse.data;\n\n      if (response.code !== '000000') {\n        showSnackbar('Terjadi Gangguan', 'error');\n        this.setState({\n          isLoading: false\n        });\n      } else {\n        localStorage.setItem('token', JSON.stringify(result));\n        localStorage.setItem('profile', JSON.stringify(responseGoogle.profileObj));\n        Router.back();\n      }\n    }).catch(error => {\n      if (isNotUndefined(error.response)) {\n        const {\n          data\n        } = error.response;\n        showSnackbar(data.response.user_errors, 'error');\n      } else {\n        showSnackbar(error.toString(), 'error');\n      }\n\n      this.setState({\n        isLoading: false\n      });\n    });\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      className: \"main-content\",\n      id: \"mainContent\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 7\n      }\n    }, __jsx(ButtonBack, {\n      id: \"btnBack\",\n      onClick: () => Router.back(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }\n    }), __jsx(Divider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }\n    }), __jsx(\"div\", {\n      className: \"txt-center-hoz font-muli-16\",\n      style: {\n        marginTop: '130px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }\n    }, \"Hi...\"), __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }\n    }, \"Selamat datang di BayarTagihan\")), __jsx(\"div\", {\n      className: \"txt-center-hoz pointer margin-top-36 margin-btm-24\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }\n    }, __jsx(GoogleLogin, {\n      clientId: process.env.NEXT_PUBLIC_GOOGLE_CLIENT_ID,\n      render: renderProps => __jsx(Button, {\n        variant: \"outlined\",\n        startIcon: __jsx(\"img\", {\n          width: 16,\n          src: \"/icon/ic_google.png\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 28\n          }\n        }),\n        size: \"large\",\n        onClick: renderProps.onClick,\n        disabled: renderProps.disabled,\n        style: {\n          textTransform: 'none'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 15\n        }\n      }, __jsx(\"span\", {\n        className: \"font-muli-14 bold\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 17\n        }\n      }, \"Masuk atau daftar dengan Google\")),\n      onSuccess: responseGoogle => this.onSuccessLogin(responseGoogle) // onFailure={responseGoogle}\n      ,\n      cookiePolicy: \"single_host_origin\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }\n    }), __jsx(BlockDialog, {\n      isOpen: this.state.isLoading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\nconst mapDispatchToProps = {\n  showSnackbar\n};\nexport default connect(null, mapDispatchToProps)(Login);","map":{"version":3,"sources":["/Users/otnielvictoryfa/task2020/atur-tagihan/pages/login/index.js"],"names":["React","Component","Router","GoogleLogin","Button","Divider","connect","axios","ButtonBack","showSnackbar","isNotUndefined","BlockDialog","Login","constructor","props","state","isLoading","componentDidMount","document","body","style","background","onSuccessLogin","responseGoogle","setState","data","JSON","stringify","access_token","accessToken","token_id","tokenId","headers","BASE_URL","process","env","NEXT_PUBLIC_API_BASE_URL","url","post","then","apiResponse","response","result","code","localStorage","setItem","profileObj","back","catch","error","user_errors","toString","render","marginTop","NEXT_PUBLIC_GOOGLE_CLIENT_ID","renderProps","onClick","disabled","textTransform","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Router from 'next/router';\nimport GoogleLogin from 'react-google-login';\n\n// material\nimport Button from '@material-ui/core/Button';\nimport Divider from '@material-ui/core/Divider';\n// component\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport ButtonBack from '../../components/global-component/ButtonBack';\n\n// redux\n\nimport { showSnackbar } from '../../redux/snackbar/action';\nimport { isNotUndefined } from '../../utils/Validator';\nimport { BlockDialog } from '../../components/global-component/BlockDialog';\n\nexport class Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: false,\n    };\n  }\n\n  componentDidMount() {\n    document.body.style.background = 'white';\n  }\n\n  /**\n   *  @summary this method mapping google response and get token then post it to backend, if success\n   *  the response google data will be saved on local\n   *  BE do validating to token given\n   * */\n\n  async onSuccessLogin(responseGoogle) {\n    this.setState({ isLoading: true });\n    const data = JSON.stringify({\n      access_token: responseGoogle.accessToken,\n      token_id: responseGoogle.tokenId,\n    });\n    const headers = {\n      'Content-Type': 'application/json',\n    };\n    const { showSnackbar } = this.props;\n\n    const BASE_URL = process.env.NEXT_PUBLIC_API_BASE_URL;\n    const url = `${BASE_URL}/customer/auth/social_login/google`;\n\n    await axios\n      .post(url, data, { headers })\n      .then(async (apiResponse) => {\n        const { response, result } = apiResponse.data;\n        if (response.code !== '000000') {\n          showSnackbar('Terjadi Gangguan', 'error');\n          this.setState({ isLoading: false });\n        } else {\n          localStorage.setItem('token', JSON.stringify(result));\n          localStorage.setItem('profile', JSON.stringify(responseGoogle.profileObj));\n          Router.back();\n        }\n      }).catch((error) => {\n        if (isNotUndefined(error.response)) {\n          const { data } = error.response;\n          showSnackbar(data.response.user_errors, 'error');\n        } else {\n          showSnackbar(error.toString(), 'error');\n        }\n        this.setState({ isLoading: false });\n      });\n  }\n\n  render() {\n    return (\n      <div className=\"main-content\" id=\"mainContent\">\n        <ButtonBack id=\"btnBack\" onClick={() => Router.back()} />\n        <Divider />\n        {/* Sementara */}\n        <div\n          className=\"txt-center-hoz font-muli-16\"\n          style={{ marginTop: '130px' }}\n        >\n          <p>Hi...</p>\n          <p>Selamat datang di BayarTagihan</p>\n        </div>\n        <div className=\"txt-center-hoz pointer margin-top-36 margin-btm-24\">\n\n          <GoogleLogin\n            clientId={process.env.NEXT_PUBLIC_GOOGLE_CLIENT_ID}\n            render={(renderProps) => (\n              <Button\n                variant=\"outlined\"\n                startIcon={<img width={16} src=\"/icon/ic_google.png\" />}\n                size=\"large\"\n                onClick={renderProps.onClick}\n                disabled={renderProps.disabled}\n                style={{ textTransform: 'none' }}\n              >\n                <span className=\"font-muli-14 bold\">Masuk atau daftar dengan Google</span>\n              </Button>\n            )}\n            onSuccess={(responseGoogle) => this.onSuccessLogin(responseGoogle)}\n              // onFailure={responseGoogle}\n            cookiePolicy=\"single_host_origin\"\n          />\n          <BlockDialog isOpen={this.state.isLoading}/>\n        </div>\n      </div>\n\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  showSnackbar,\n};\nexport default connect(null, mapDispatchToProps)(Login);\n"]},"metadata":{},"sourceType":"module"}