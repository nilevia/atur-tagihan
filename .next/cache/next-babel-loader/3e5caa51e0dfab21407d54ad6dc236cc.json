{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Router from 'next/router'; // material\n\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Timer from '@material-ui/icons/Timer';\nimport Divider from '@material-ui/core/Divider';\nimport CircularProgress from '@material-ui/core/CircularProgress'; // component\n\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport SuccessPayment from '../../../components/status-pembayaran/SuccessPayment';\nimport MainLogo from '../../../components/global-component/MainLogo';\nimport { getRupiah } from '../../../utils/Calculate';\nimport { copyToClipboard, getHashUrl } from '../../../utils/CommonUtils';\nimport ButtonMain from '../../../components/global-component/ButtonMain';\nimport ProductOrderDetail from '../../../components/status-pembayaran/ProductOrderDetail'; // redux\n\nimport { showSnackbar } from '../../../redux/snackbar/action';\nimport { showDialogOrderDetail } from '../../../redux/productOrderDetail/action';\nimport { isNotUndefined } from '../../../utils/Validator';\nimport { PaymentInstruction } from '../../../components/status-pembayaran/PaymentInstruction';\nimport { CountDownHourly } from '@nilevia/count-down-timer-react';\nexport var StatusPembayaran = /*#__PURE__*/function (_Component) {\n  _inherits(StatusPembayaran, _Component);\n\n  var _super = _createSuper(StatusPembayaran);\n\n  function StatusPembayaran(props) {\n    var _this;\n\n    _classCallCheck(this, StatusPembayaran);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      countDown: {\n        hours: 0,\n        min: 0,\n        sec: 0\n      },\n      orderId: 0,\n      isLoading: true,\n      paymentOrder: {\n        status: null,\n        payment_expired: null,\n        payment_bank_account: 0,\n        total: 0,\n        payment_method_id: 0,\n        payment_method_name: '-',\n        items: [] // next admin fee will be here\n\n      },\n      paymentInfo: {\n        bank_name: '-',\n        instruction_message: '-',\n        icon: null\n      }\n    };\n    return _this;\n  }\n\n  _createClass(StatusPembayaran, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      document.body.className = 'body-blue';\n      var orderId = getHashUrl();\n      this.setState({\n        orderId: orderId\n      });\n      this.getPaymentOrder(orderId); //localStorage.clear();\n\n      localStorage.removeItem('cId');\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      document.body.className = null;\n    }\n    /**\n     * @method getPaymentOrder\n     * @summary to get payment order detail by order id that inserted on url\n     * @param orderId\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: \"getPaymentOrder\",\n    value: function () {\n      var _getPaymentOrder = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(orderId) {\n        var _this2 = this;\n\n        var showSnackbar, BASE_URL, url;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                showSnackbar = this.props.showSnackbar;\n                BASE_URL = process.env.NEXT_PUBLIC_API_BASE_URL;\n                url = \"\".concat(BASE_URL, \"/order/atur_tagihan/\").concat(orderId);\n                _context3.next = 5;\n                return axios.get(url).then( /*#__PURE__*/function () {\n                  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(apiResponse) {\n                    var _apiResponse$data, response, result;\n\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            _apiResponse$data = apiResponse.data, response = _apiResponse$data.response, result = _apiResponse$data.result;\n\n                            if (response.code !== '000000') {\n                              showSnackbar('Terjadi Gangguan', 'error');\n\n                              _this2.setState({\n                                isLoading: false\n                              });\n                            } else {\n                              _this2.setState({\n                                paymentOrder: result\n                              });\n\n                              _this2.getPaymentInfo(result.payment_method_id);\n                            }\n\n                          case 2:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee);\n                  }));\n\n                  return function (_x2) {\n                    return _ref.apply(this, arguments);\n                  };\n                }())[\"catch\"]( /*#__PURE__*/function () {\n                  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(error) {\n                    var data;\n                    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            if (isNotUndefined(error.response)) {\n                              data = error.response.data;\n                              showSnackbar(data.response.user_errors, 'error');\n                            } else {\n                              showSnackbar(error.toString(), 'error');\n                            }\n\n                            _this2.setState({\n                              isLoading: false\n                            });\n\n                          case 2:\n                          case \"end\":\n                            return _context2.stop();\n                        }\n                      }\n                    }, _callee2);\n                  }));\n\n                  return function (_x3) {\n                    return _ref2.apply(this, arguments);\n                  };\n                }());\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function getPaymentOrder(_x) {\n        return _getPaymentOrder.apply(this, arguments);\n      }\n\n      return getPaymentOrder;\n    }()\n    /**\n     * @method getPaymentInfor\n     * @summary this method is used to bet get payment info based on id given on the first api call\n     * @param id\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: \"getPaymentInfo\",\n    value: function () {\n      var _getPaymentInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(id) {\n        var _this3 = this;\n\n        var showSnackbar, BASE_URL, url;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                showSnackbar = this.props.showSnackbar;\n                BASE_URL = process.env.NEXT_PUBLIC_API_BASE_URL;\n                url = \"\".concat(BASE_URL, \"/payment_method/\").concat(id);\n                _context6.next = 5;\n                return axios.get(url).then( /*#__PURE__*/function () {\n                  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(apiResponse) {\n                    var _apiResponse$data2, response, result;\n\n                    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                      while (1) {\n                        switch (_context4.prev = _context4.next) {\n                          case 0:\n                            _apiResponse$data2 = apiResponse.data, response = _apiResponse$data2.response, result = _apiResponse$data2.result;\n\n                            if (response.code !== '000000') {\n                              showSnackbar('Terjadi Gangguan', 'error');\n                            } else {\n                              _this3.setState({\n                                paymentInfo: result\n                              });\n                            }\n\n                            _this3.setState({\n                              isLoading: false\n                            });\n\n                          case 3:\n                          case \"end\":\n                            return _context4.stop();\n                        }\n                      }\n                    }, _callee4);\n                  }));\n\n                  return function (_x5) {\n                    return _ref3.apply(this, arguments);\n                  };\n                }())[\"catch\"]( /*#__PURE__*/function () {\n                  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(error) {\n                    var data;\n                    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n                      while (1) {\n                        switch (_context5.prev = _context5.next) {\n                          case 0:\n                            if (isNotUndefined(error.response)) {\n                              data = error.response.data;\n                              showSnackbar(data.response.user_errors, 'error');\n                            } else {\n                              showSnackbar(error.toString(), 'error');\n                            }\n\n                            _this3.setState({\n                              isLoading: false\n                            });\n\n                          case 2:\n                          case \"end\":\n                            return _context5.stop();\n                        }\n                      }\n                    }, _callee5);\n                  }));\n\n                  return function (_x6) {\n                    return _ref4.apply(this, arguments);\n                  };\n                }());\n\n              case 5:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function getPaymentInfo(_x4) {\n        return _getPaymentInfo.apply(this, arguments);\n      }\n\n      return getPaymentInfo;\n    }()\n    /**\n     * @method copyText\n     * @summary copy given text and wait till i success then display the snackbar\n     * @param (text) to copy\n     * */\n\n  }, {\n    key: \"copyText\",\n    value: function () {\n      var _copyText = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(text) {\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return copyToClipboard(text);\n\n              case 2:\n                this.props.showSnackbar('Berhasil disalin', 'success');\n\n              case 3:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function copyText(_x7) {\n        return _copyText.apply(this, arguments);\n      }\n\n      return copyText;\n    }()\n    /**\n     * @method onRefresh\n     * @summary this is just dummy, next will hit end point\n     */\n\n  }, {\n    key: \"onRefresh\",\n    value: function onRefresh() {\n      this.setState({\n        isLoading: true\n      });\n      this.getPaymentOrder(this.state.orderId);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var _this$state = this.state,\n          orderId = _this$state.orderId,\n          paymentOrder = _this$state.paymentOrder,\n          paymentInfo = _this$state.paymentInfo,\n          isLoading = _this$state.isLoading;\n      var showDialogOrderDetail = this.props.showDialogOrderDetail;\n      var mainContent;\n\n      var timerSection = __jsx(\"div\", {\n        className: \"flex\"\n      }, __jsx(Timer, {\n        className: \"margin-rgt-16\"\n      }), __jsx(\"div\", null, __jsx(\"p\", {\n        className: \"font-muli-12 \"\n      }, \"Sisa waktu\"), __jsx(CountDownHourly, {\n        endDate: paymentOrder.payment_expired,\n        className: \"font-muli-16 red bold\"\n      })));\n\n      if (paymentOrder.status === 3) {\n        // const splittedInstruction = paymentInfo.instruction_message.split('\\n');\n        mainContent = __jsx(\"div\", {\n          id: \"waitingPayment\"\n        }, __jsx(\"p\", {\n          className: \"font-muli-14 white margin-btm-32\"\n        }, \"Klik refresh untuk mengupdate halaman ini dan melihat status pembayaran anda\"), __jsx(Paper, {\n          className: \"padding-22 margin-btm-16\",\n          elevation: 0\n        }, __jsx(Grid, {\n          container: true,\n          direction: \"row\",\n          justify: \"space-between\",\n          className: \"margin-btm-16 txt-center-ver\"\n        }, __jsx(Grid, null, timerSection), __jsx(Grid, null, __jsx(ButtonMain, {\n          id: \"refreshButton\",\n          color: \"primary\",\n          size: \"large\",\n          onClick: function onClick() {\n            return _this4.onRefresh();\n          }\n        }, \"REFRESH\"))), __jsx(Divider, null), __jsx(Grid, {\n          container: true,\n          direction: \"row\",\n          justify: \"space-between\",\n          className: \"margin-top-24 margin-btm-24 txt-center-ver\"\n        }, __jsx(Grid, null, __jsx(\"p\", {\n          className: \"font-muli-14\"\n        }, paymentOrder.items.length > 1 ? 'Tagihan + Produk' : 'Tagihan')), __jsx(Grid, null, __jsx(\"p\", {\n          id: \"dialogOrderDetail\",\n          className: \"font-muli-16 light-blue bold\",\n          onClick: function onClick() {\n            return showDialogOrderDetail(paymentOrder.items, paymentOrder.total, paymentOrder.admin_fee);\n          }\n        }, \"LIHAT DETAIL\"))), __jsx(ProductOrderDetail, null), __jsx(Divider, null), __jsx(\"div\", {\n          className: \"flex margin-btm-24 margin-top-16\"\n        }, __jsx(\"span\", {\n          className: \"grey-dot margin-rgt-8\"\n        }), __jsx(\"div\", null, __jsx(\"p\", {\n          className: \"font-muli-14\"\n        }, \"Status pembayaran\"), __jsx(\"p\", {\n          className: \"font-muli-16 bold\"\n        }, \"Menunggu pembayaran\"))), __jsx(Divider, null), __jsx(Grid, {\n          container: true,\n          direction: \"row\",\n          justify: \"space-between\",\n          className: \"margin-top-24\"\n        }, __jsx(Grid, null, __jsx(\"p\", {\n          className: \"font-muli-14\"\n        }, \"Metode Pembayaran\"), __jsx(\"p\", {\n          className: \"font-muli-16 bold\"\n        }, paymentOrder.payment_method_name)), __jsx(Grid, null, __jsx(\"img\", {\n          src: paymentInfo.icon,\n          className: \"payment-method-status-image\"\n        }))), __jsx(Grid, {\n          container: true,\n          direction: \"row\",\n          justify: \"space-between\",\n          className: \"margin-top-16 txt-center-ver payment-identification-bg\"\n        }, __jsx(Grid, null, __jsx(\"p\", {\n          className: \"font-muli-14\"\n        }, \"Nomor rekening\"), __jsx(\"p\", {\n          className: \"font-muli-18 bold\"\n        }, paymentOrder.payment_bank_account)), __jsx(Grid, null, __jsx(\"p\", {\n          id: \"copyBillerAccount\",\n          onClick: function onClick() {\n            return _this4.copyText(paymentOrder.payment_bank_account);\n          },\n          className: \"font-muli-14 dark-blue bold\"\n        }, \"SALIN\"))), __jsx(\"p\", {\n          className: \"font-muli-14 margin-top-24\"\n        }, \"Tagihan anda\"), __jsx(Grid, {\n          container: true,\n          direction: \"row\",\n          justify: \"space-between\",\n          className: \"margin-top-16 txt-center-ver payment-identification-bg\"\n        }, __jsx(Grid, null, __jsx(\"p\", {\n          className: \"font-muli-14\"\n        }, \"Total tagihan\"), __jsx(\"p\", {\n          className: \"font-muli-18 bold\"\n        }, getRupiah(paymentOrder.total))), __jsx(Grid, null, __jsx(\"p\", {\n          id: \"copyTotalPayment\",\n          onClick: function onClick() {\n            return _this4.copyText(paymentOrder.total);\n          },\n          className: \"font-muli-14 dark-blue bold\"\n        }, \"SALIN\")))), PaymentInstruction(paymentInfo));\n      } else if (paymentOrder.status === 4) {\n        // Router.push('/pembayaran-berhasil');\n        mainContent = __jsx(SuccessPayment, {\n          items: paymentOrder.items\n        });\n      } else if (paymentOrder.status === 6) {\n        mainContent = __jsx(\"div\", {\n          id: \"onfailedPayment\"\n        }, __jsx(Paper, {\n          className: \"padding-22\",\n          elevation: 0\n        }, timerSection, __jsx(\"div\", {\n          className: \"flex margin-btm-24 margin-top-16\"\n        }, __jsx(\"span\", {\n          className: \"red-dot margin-rgt-8\"\n        }), __jsx(\"div\", null, __jsx(\"p\", {\n          className: \"font-muli-14\"\n        }, \"Status pembayaran\"), __jsx(\"p\", {\n          className: \"font-muli-16 bold\"\n        }, \"Expired\"))), __jsx(\"p\", {\n          className: \"font-muli-14 margin-btm-16\"\n        }, \"Waktu pembayaran telah habis. Silahkan pilih ulang metode pembayaran\"), __jsx(ButtonMain, {\n          id: \"detailTagihanButton\",\n          color: \"primary\",\n          width: \"fullWidth\",\n          size: \"large\",\n          onClick: function onClick() {\n            return Router.push(\"/detail-tagihan/\".concat(orderId));\n          }\n        }, \"Ke Detail Tagihan\")));\n      } else {\n        mainContent = null;\n      }\n\n      return __jsx(\"div\", null, __jsx(MainLogo, null), isLoading ? __jsx(CircularProgress, {\n        style: {\n          position: 'absolute',\n          left: '47%',\n          top: '50%'\n        }\n      }) : __jsx(\"div\", {\n        className: \"main-content\",\n        id: \"mainContent\"\n      }, mainContent));\n    }\n  }]);\n\n  return StatusPembayaran;\n}(Component);\nvar mapDispatchToProps = {\n  showSnackbar: showSnackbar,\n  showDialogOrderDetail: showDialogOrderDetail\n};\nexport default connect(null, mapDispatchToProps)(StatusPembayaran);","map":null,"metadata":{},"sourceType":"module"}