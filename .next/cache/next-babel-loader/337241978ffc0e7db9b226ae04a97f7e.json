{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Router from 'next/router'; // Material\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport CircularProgress from '@material-ui/core/CircularProgress'; // Redux\n\nimport { connect } from 'react-redux';\nimport Grid from '@material-ui/core/Grid';\nimport axios from 'axios';\nimport { showDialog, clearDialog } from '../redux/paymentMethod/action';\nimport { showSnackbar } from '../redux/snackbar/action'; // Component\n\nimport ButtonMain from './global-component/ButtonMain';\nimport { isNotUndefined } from '../utils/Validator';\nexport var ConfirmationDialogPaymentMethod = /*#__PURE__*/function (_Component) {\n  _inherits(ConfirmationDialogPaymentMethod, _Component);\n\n  var _super = _createSuper(ConfirmationDialogPaymentMethod);\n\n  function ConfirmationDialogPaymentMethod(props) {\n    var _this;\n\n    _classCallCheck(this, ConfirmationDialogPaymentMethod);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      isLoading: false\n    };\n    return _this;\n  }\n\n  _createClass(ConfirmationDialogPaymentMethod, [{\n    key: \"handleClose\",\n    value: function handleClose() {\n      this.props.clearDialog();\n    }\n  }, {\n    key: \"createOrder\",\n    value: function () {\n      var _createOrder = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(customerId, itemCartId, paymentMethodId, orderId) {\n        var _this2 = this;\n\n        var showSnackbar, BASE_URL, url, headers, data;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.setState({\n                  isLoading: true\n                });\n                showSnackbar = this.props.showSnackbar;\n                BASE_URL = process.env.NEXT_PUBLIC_API_BASE_URL;\n                url = \"\".concat(BASE_URL, \"/order/atur_tagihan\");\n                headers = {\n                  'Content-Type': 'application/json'\n                };\n                data = JSON.stringify({\n                  customer_id: parseInt(customerId, 10),\n                  cart_id: itemCartId,\n                  payment_method_id: paymentMethodId\n                });\n                _context2.next = 8;\n                return axios.post(url, data, {\n                  headers: headers\n                }).then( /*#__PURE__*/function () {\n                  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(apiResponse) {\n                    var response;\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            response = apiResponse.data.response;\n\n                            if (response.code !== '000000') {\n                              showSnackbar('Terjadi Gangguan', 'error');\n                            } else {\n                              Router.push(\"/status-pembayaran/\".concat(orderId));\n                            }\n\n                            _this2.setState({\n                              isLoading: false\n                            });\n\n                          case 3:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee);\n                  }));\n\n                  return function (_x5) {\n                    return _ref.apply(this, arguments);\n                  };\n                }())[\"catch\"](function (error) {\n                  if (isNotUndefined(error.response)) {\n                    var _data = error.response.data;\n                    showSnackbar(_data.response.user_errors, 'error');\n                  } else {\n                    showSnackbar(error.toString(), 'error');\n                  }\n\n                  _this2.setState({\n                    isLoading: false\n                  });\n                });\n\n              case 8:\n                this.handleClose();\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function createOrder(_x, _x2, _x3, _x4) {\n        return _createOrder.apply(this, arguments);\n      }\n\n      return createOrder;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$props$PaymentMe = this.props.PaymentMethod,\n          dialogOpen = _this$props$PaymentMe.dialogOpen,\n          groupPayment = _this$props$PaymentMe.groupPayment,\n          paymentLogo = _this$props$PaymentMe.paymentLogo,\n          paymentId = _this$props$PaymentMe.paymentId,\n          customerId = _this$props$PaymentMe.customerId,\n          itemCartId = _this$props$PaymentMe.itemCartId,\n          orderId = _this$props$PaymentMe.orderId;\n      var isLoading = this.state.isLoading;\n      return __jsx(Dialog, {\n        disableBackdropClick: true,\n        open: dialogOpen,\n        fullWidth: true,\n        maxWidth: \"xs\"\n      }, __jsx(DialogContent, null, __jsx(\"p\", {\n        className: \"font-muli-18 bold\"\n      }, \"Konfirmasi\"), __jsx(\"p\", {\n        className: \"font-muli-14 margin-btm-16\"\n      }, \"Apakah anda yakin ingin menggunakan :\"), __jsx(\"p\", {\n        className: \"font-muli-14 margin-btm-16\"\n      }, groupPayment), __jsx(\"img\", {\n        src: paymentLogo,\n        className: \"payment-method-diaglog-image margin-btm-32\"\n      }), isLoading ? __jsx(CircularProgress, {\n        style: {\n          position: 'sticky',\n          left: '47%'\n        }\n      }) : __jsx(Grid, {\n        container: true,\n        direction: \"row\",\n        justify: \"space-between\",\n        spacing: 2\n      }, __jsx(Grid, {\n        item: true,\n        xs: 6\n      }, __jsx(ButtonMain, {\n        id: \"btnClose\",\n        onClick: function onClick() {\n          return _this3.handleClose();\n        },\n        color: \"secondary\",\n        width: \"fullWidth\"\n      }, \"Kembali\")), __jsx(Grid, {\n        item: true,\n        xs: 6\n      }, __jsx(ButtonMain, {\n        id: \"btnNext\",\n        onClick: function onClick() {\n          return _this3.createOrder(customerId, itemCartId, paymentId, orderId);\n        },\n        color: \"primary\",\n        width: \"fullWidth\"\n      }, \"Lanjutkan\")))));\n    }\n  }]);\n\n  return ConfirmationDialogPaymentMethod;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    PaymentMethod: state.PaymentMethod\n  };\n};\n\nvar mapDispatchToProps = {\n  showDialog: showDialog,\n  clearDialog: clearDialog,\n  showSnackbar: showSnackbar\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(ConfirmationDialogPaymentMethod);","map":null,"metadata":{},"sourceType":"module"}