{"ast":null,"code":"/**\n * @method getRupiah\n * @summary melakukan spliting pada input menjadi format mata uang Rp\n * @param nominal\n * @returns {string}\n */\nimport { isNotUndefined } from './Validator';\nexport function getRupiah(nominal) {\n  if (!isNotUndefined(nominal) || nominal === null || nominal === '') return 'Harga tidak ditemukan';\n  return `Rp${nominal.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1.')}`;\n} // ################ Converted to library ################\n\n/**\n * @method countDownTimer\n * @summary custom countdown timer by giving specific date and calculate it based on date now\n * see how to use it on status-pembayaran page\n * @param endDate\n * @returns {{sec: number, hours: number, min: number}|boolean}\n */\n// export function countDownTimer(endDate) {\n//   let diff = (Date.parse(new Date(endDate)) - Date.parse(new Date())) / 1000;\n//\n//   // clear countdown when date is reached\n//   if (diff < 0) return false;\n//\n//   const timeLeft = {\n//     hours: 0,\n//     min: 0,\n//     sec: 0,\n//   };\n//\n//   if (diff >= 3600) { // 60 * 60\n//     timeLeft.hours = Math.floor(diff / 3600);\n//     diff -= timeLeft.hours * 3600;\n//   }\n//   if (diff >= 60) {\n//     timeLeft.min = Math.floor(diff / 60);\n//     diff -= timeLeft.min * 60;\n//   }\n//   timeLeft.sec = diff;\n//\n//   return timeLeft;\n// }\n\n/**\n * @method addLeadingZeros\n * @summary menambahkan angka 0 pada waktu yang dibawah 2 digit\n * misal dari 1 menjad 01\n * @param val\n * @returns {string}\n */\n// export function addLeadingZeros(val) {\n//   let value = String(val);\n//   while (value.length < 2) {\n//     value = `0${value}`;\n//   }\n//   return value;\n// }","map":null,"metadata":{},"sourceType":"module"}