{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport moment from 'moment';\nimport Router from 'next/router'; // material\n\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Dialog from '@material-ui/core/Dialog';\nimport CircularProgress from '@material-ui/core/CircularProgress'; // component\n\nimport { connect } from 'react-redux';\nimport Divider from '@material-ui/core/Divider';\nimport ButtonNavigationPay from '../../components/global-component/ButtonNavigationPay';\nimport ProductCard from '../../components/global-component/ProductCard';\nimport MainLogo from '../../components/global-component/MainLogo';\nimport CompanyLogo from '../../components/global-component/CompanyLogo';\nimport { getRupiah } from '../../utils/Calculate';\nimport PaymentMethod from '../../components/PaymentMethod';\nimport BasicConfirmationDialog from '../../components/global-component/BasicConfirmationDialog'; // redux\n\nimport { showSnackbar } from '../../redux/snackbar/action';\nimport ProductOrderDetail from '../../components/status-pembayaran/ProductOrderDetail';\nimport { showDialogOrderDetail } from '../../redux/productOrderDetail/action';\nimport { showConfirmationDialog } from '../../redux/basicConfimationDialog/action';\nimport { additionalProductURL } from '../../utils/MappingIdToUrl';\nimport { AuthNetworkCall } from '../../utils/NetworkCall';\nexport class Keranjang extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isError: true,\n      isLoading: true,\n      orderId: 0,\n      openDialogPayment: false,\n      data: {\n        customer_name: '-',\n        items: [],\n        total: 0\n      },\n      additionalProduct: []\n    };\n  }\n\n  async componentDidMount() {\n    document.body.className = 'body-blue';\n    this.getOrderDetail();\n  }\n\n  componentWillUnmount() {\n    document.body.className = null;\n  }\n  /**\n   * @method getOrderDetail\n   * @summary get detail of given order id by url and set it back to state (CART)\n   * @param order_id\n   * @returns {Promise<void>}\n   */\n\n\n  async getOrderDetail() {\n    const result = await AuthNetworkCall('/cart', 'get', this.props.showSnackbar);\n\n    if (result) {\n      this.setState({\n        data: result,\n        isError: false\n      });\n      this.getAdditionalProduct();\n    }\n\n    this.setState({\n      isLoading: false\n    });\n  }\n  /**\n   * @summary mendapatkan produk tambahan\n   * @returns {Promise<void>}\n   */\n\n\n  async getAdditionalProduct() {\n    const result = await AuthNetworkCall('/product_type/available?is_special__equals=0', 'get', () => {});\n\n    if (result) {\n      this.setState({\n        additionalProduct: result\n      });\n    } else {\n      this.props.showSnackbar('Terjadi gangguan mengambil produk', 'error');\n    }\n  }\n  /**\n   * @summary menghapus produk tambahan\n   * @param cartId\n   * @returns {Promise<void>}\n   */\n\n\n  async deleteCartItem(cartId) {\n    this.setState({\n      isLoading: true\n    });\n    const result = await AuthNetworkCall(`/cart/${cartId}`, 'delete', () => {});\n\n    if (result) {\n      this.getOrderDetail();\n    } else {\n      this.setState({\n        isLoading: false\n      });\n      this.props.showSnackbar('Terjadi gangguan ketika menghapus produk tambahan', 'error');\n    }\n  }\n\n  render() {\n    const {\n      showDialogOrderDetail,\n      showConfirmationDialog\n    } = this.props;\n    const {\n      data,\n      isError,\n      openDialogPayment,\n      isLoading,\n      orderId,\n      additionalProduct\n    } = this.state;\n\n    const deleteItem = id => __jsx(\"p\", {\n      id: \"deleteAdditional\",\n      onClick: () => showConfirmationDialog('Hapus produk tambahan', 'Apakah anda yakin?', () => this.deleteCartItem(id)),\n      className: \"font-muli-14 bold light-blue pointer\"\n    }, \"HAPUS\");\n\n    const aturTagihanItem = item => __jsx(Paper, {\n      id: \"mainSection\",\n      className: \"padding-22 margin-btm-16\",\n      elevation: 0\n    }, __jsx(Grid, {\n      container: true,\n      direction: \"row\",\n      justify: \"space-between\",\n      className: \"txt-center-ver margin-btm-16\"\n    }, __jsx(Grid, null, __jsx(CompanyLogo, {\n      src: item.product_logo\n    })), __jsx(Grid, null, deleteItem(item.id))), __jsx(Divider, null), __jsx(Grid, {\n      container: true,\n      direction: \"row\",\n      justify: \"space-between\",\n      className: \"margin-btm-24 txt-center-ver margin-top-16\"\n    }, __jsx(Grid, null, __jsx(\"p\", {\n      className: \"font-muli-14 bold\"\n    }, \"Kode Tagihan\")), __jsx(Grid, null, __jsx(\"p\", {\n      id: \"orderId\",\n      className: \"font-muli-14 bold txt-end rounded-bg max-15-char\"\n    }, item.data.billing_id))), __jsx(Grid, {\n      container: true,\n      direction: \"row\",\n      justify: \"space-between\",\n      className: \"margin-btm-24\"\n    }, __jsx(Grid, {\n      item: true,\n      xs: 6\n    }, __jsx(\"p\", {\n      className: \"font-muli-300\"\n    }, \"Nama Pelanggan\"), __jsx(\"p\", {\n      className: \"font-muli-16 bold\"\n    }, item.data.customer_name)), __jsx(Grid, {\n      item: true,\n      xs: 6\n    }, __jsx(\"p\", {\n      className: \"font-muli-300 txt-end\"\n    }, \"Jatuh Tempo\"), __jsx(\"p\", {\n      className: \"font-muli-16 bold txt-end\"\n    }, moment(item.data.end_date, 'YYYY-MM-DD hh:mm:ss').locale('ID').format('LL')))), __jsx(\"p\", {\n      className: \"font-muli-14 bold\"\n    }, \"Rincian tagihan\"), item.data.details.map(detail => __jsx(Grid, {\n      id: detail.id,\n      container: true,\n      direction: \"row\",\n      justify: \"space-between\"\n    }, __jsx(Grid, null, __jsx(\"p\", {\n      className: \"font-muli-14\"\n    }, detail.billing_type_name)), __jsx(Grid, null, __jsx(\"p\", {\n      className: \"font-muli-16\"\n    }, getRupiah(detail.amount))))));\n\n    const commonItem = item => __jsx(Paper, {\n      className: \"padding-22 margin-btm-16\",\n      elevation: 0\n    }, __jsx(Grid, {\n      container: true,\n      direction: \"row\",\n      justify: \"space-between\",\n      className: \"txt-center-ver margin-btm-16\"\n    }, __jsx(Grid, null, __jsx(\"p\", {\n      className: \"font-muli-14 bold\"\n    }, item.product_type_name)), __jsx(Grid, null, deleteItem(item.id))), __jsx(Divider, null), __jsx(Grid, {\n      container: true,\n      direction: \"row\",\n      justify: \"space-between\",\n      className: \"txt-center-ver margin-top-16\"\n    }, __jsx(Grid, {\n      item: true,\n      xs: 7\n    }, __jsx(\"p\", {\n      className: \"font-muli-14 bold\"\n    }, item.product_name), __jsx(\"p\", {\n      className: \"font-muli-12 max-15-char\"\n    }, item.order_identifier)), __jsx(Grid, {\n      item: true,\n      xs: 5\n    }, __jsx(\"p\", {\n      className: \"font-muli-16 txt-end\"\n    }, getRupiah(item.total)))));\n\n    return __jsx(\"div\", null, __jsx(MainLogo, null), isLoading ? __jsx(CircularProgress, {\n      style: {\n        position: 'absolute',\n        left: '47%',\n        top: '50%'\n      }\n    }) : __jsx(\"div\", {\n      className: \"main-content\",\n      id: \"mainContent\"\n    }, data.items.length > 0 ? data.items.map(item => item.is_special === 1 ? aturTagihanItem(item) : commonItem(item)) : __jsx(Paper, {\n      className: \"padding-36 txt-center-hoz\",\n      elevation: 0\n    }, __jsx(\"img\", {\n      src: \"/icon/ic_empty_cart.svg\"\n    }), __jsx(\"p\", {\n      className: \"grey font-muli-16 padding-22\"\n    }, \"Maaf, keranjang tagihan anda masih kosong\")), __jsx(BasicConfirmationDialog, null), __jsx(\"p\", {\n      className: \"font-muli-14 bold margin-tp-btm-22\"\n    }, \"Tambahkan tagihan.\"), __jsx(\"div\", {\n      id: \"secondSection\",\n      className: \"horizontal-scroll\"\n    }, additionalProduct.map(item => __jsx(ProductCard, {\n      id: `product${item.id}`,\n      title: item.name,\n      logo: item.icon,\n      onClick: () => Router.push(additionalProductURL(item.id))\n    })))), __jsx(ButtonNavigationPay, {\n      totalPayment: getRupiah(data.total),\n      onClick: () => {\n        this.setState({\n          openDialogPayment: true\n        });\n      },\n      onDetailClick: () => showDialogOrderDetail(data.items, data.total, data.admin_fee),\n      disabled: isError\n    }), __jsx(Dialog, {\n      fullScreen: true,\n      open: openDialogPayment\n    }, __jsx(PaymentMethod, {\n      cartDetail: data // custId={customer_id}\n      ,\n      orderId: orderId,\n      onClose: () => this.setState({\n        openDialogPayment: false\n      })\n    })), __jsx(ProductOrderDetail, null));\n  }\n\n}\nconst mapDispatchToProps = {\n  showSnackbar,\n  showDialogOrderDetail,\n  showConfirmationDialog\n};\nexport default connect(null, mapDispatchToProps)(Keranjang);","map":null,"metadata":{},"sourceType":"module"}