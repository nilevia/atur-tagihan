{"ast":null,"code":"var _jsxFileName = \"/Users/otnielvictoryfa/task2020/atur-tagihan/pages/login/index.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Router from 'next/router';\nimport GoogleLogin from 'react-google-login'; // material\n\nimport Button from '@material-ui/core/Button';\nimport Divider from '@material-ui/core/Divider'; // component\n\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport ButtonBack from '../../components/global-component/ButtonBack'; // redux\n\nimport { showSnackbar } from '../../redux/snackbar/action';\nimport { isNotUndefined } from '../../utils/Validator';\nimport { BlockDialog } from '../../components/global-component/BlockDialog';\nimport ApiService from '../../utils/ApiService';\nexport class Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: false\n    };\n  }\n\n  componentDidMount() {\n    document.body.style.background = 'white';\n    this.onSuccessLogin({});\n  }\n  /**\n   *  @summary this method mapping google response and get token then post it to backend, if success\n   *  the response google data will be saved on local\n   *  BE do validating to token given\n   * */\n\n\n  async onSuccessLogin(responseGoogle) {\n    this.setState({\n      isLoading: true\n    });\n    const data = JSON.stringify({\n      access_token: responseGoogle.accessToken,\n      token_id: responseGoogle.tokenId\n    });\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n    const {\n      showSnackbar\n    } = this.props;\n    const BASE_URL = process.env.NEXT_PUBLIC_API_BASE_URL;\n    const url = `${BASE_URL}/customer/auth/social_login/google`;\n    const result = await ApiService().CommonNetworkCall(url, 'post', data, headers);\n\n    if (result) {\n      localStorage.setItem('token', JSON.stringify(result));\n      localStorage.setItem('profile', JSON.stringify(responseGoogle.profileObj));\n      Router.back();\n    } //\n    // await axios\n    //   .post(url, data, { headers })\n    //   .then(async (apiResponse) => {\n    //     const { response, result } = apiResponse.data;\n    //     if (response.code !== '000000') {\n    //       showSnackbar('Terjadi Gangguan', 'error');\n    //       this.setState({ isLoading: false });\n    //     } else {\n    //       localStorage.setItem('token', JSON.stringify(result));\n    //       localStorage.setItem('profile', JSON.stringify(responseGoogle.profileObj));\n    //       Router.back();\n    //     }\n    //   }).catch((error) => {\n    //     if (isNotUndefined(error.response)) {\n    //       const { data } = error.response;\n    //       showSnackbar(data.response.user_errors, 'error');\n    //     } else {\n    //       showSnackbar(error.toString(), 'error');\n    //     }\n    //     this.setState({ isLoading: false });\n    //   });\n\n  }\n\n  render() {\n    const {\n      path,\n      method,\n      data = '',\n      headers = {}\n    } = this.props;\n    return __jsx(\"div\", {\n      className: \"main-content\",\n      id: \"mainContent\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 7\n      }\n    }, __jsx(ButtonBack, {\n      id: \"btnBack\",\n      onClick: () => Router.back(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }\n    }), __jsx(Divider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }\n    }), __jsx(\"div\", {\n      className: \"txt-center-hoz font-muli-16\",\n      style: {\n        marginTop: '130px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }\n    }, \"Hi...\"), __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }\n    }, \"Selamat datang di BayarTagihan\")), __jsx(\"div\", {\n      className: \"txt-center-hoz pointer margin-top-36 margin-btm-24\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }\n    }, __jsx(GoogleLogin, {\n      clientId: process.env.NEXT_PUBLIC_GOOGLE_CLIENT_ID,\n      render: renderProps => __jsx(Button, {\n        variant: \"outlined\",\n        startIcon: __jsx(\"img\", {\n          width: 16,\n          src: \"/icon/ic_google.png\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 28\n          }\n        }),\n        size: \"large\",\n        onClick: renderProps.onClick,\n        disabled: renderProps.disabled,\n        style: {\n          textTransform: 'none'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 15\n        }\n      }, __jsx(\"span\", {\n        className: \"font-muli-14 bold\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 17\n        }\n      }, \"Masuk atau daftar dengan Google\")),\n      onSuccess: responseGoogle => this.onSuccessLogin(responseGoogle) // onFailure={responseGoogle}\n      ,\n      cookiePolicy: \"single_host_origin\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }\n    }), __jsx(BlockDialog, {\n      isOpen: this.state.isLoading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\nconst mapDispatchToProps = {\n  showSnackbar\n};\nexport default connect(null, mapDispatchToProps)(Login);","map":{"version":3,"sources":["/Users/otnielvictoryfa/task2020/atur-tagihan/pages/login/index.js"],"names":["React","Component","Router","GoogleLogin","Button","Divider","connect","axios","ButtonBack","showSnackbar","isNotUndefined","BlockDialog","ApiService","Login","constructor","props","state","isLoading","componentDidMount","document","body","style","background","onSuccessLogin","responseGoogle","setState","data","JSON","stringify","access_token","accessToken","token_id","tokenId","headers","BASE_URL","process","env","NEXT_PUBLIC_API_BASE_URL","url","result","CommonNetworkCall","localStorage","setItem","profileObj","back","render","path","method","marginTop","NEXT_PUBLIC_GOOGLE_CLIENT_ID","renderProps","onClick","disabled","textTransform","mapDispatchToProps"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,WAAP,MAAwB,oBAAxB,C,CAEA;;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,OAAP,MAAoB,2BAApB,C,CACA;;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,8CAAvB,C,CAEA;;AAEA,SAASC,YAAT,QAA6B,6BAA7B;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,SAASC,WAAT,QAA4B,+CAA5B;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AAEA,OAAO,MAAMC,KAAN,SAAoBZ,SAApB,CAA8B;AACnCa,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,SAAS,EAAE;AADA,KAAb;AAGD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBC,UAApB,GAAiC,OAAjC;AACA,SAAKC,cAAL,CAAoB,EAApB;AACD;AAED;AACF;AACA;AACA;AACA;;;AAEE,QAAMA,cAAN,CAAqBC,cAArB,EAAqC;AACnC,SAAKC,QAAL,CAAc;AAAER,MAAAA,SAAS,EAAE;AAAb,KAAd;AACA,UAAMS,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAC1BC,MAAAA,YAAY,EAAEL,cAAc,CAACM,WADH;AAE1BC,MAAAA,QAAQ,EAAEP,cAAc,CAACQ;AAFC,KAAf,CAAb;AAIA,UAAMC,OAAO,GAAG;AACd,sBAAgB;AADF,KAAhB;AAGA,UAAM;AAAExB,MAAAA;AAAF,QAAmB,KAAKM,KAA9B;AAEA,UAAMmB,QAAQ,GAAGC,OAAO,CAACC,GAAR,CAAYC,wBAA7B;AACA,UAAMC,GAAG,GAAI,GAAEJ,QAAS,oCAAxB;AAEA,UAAMK,MAAM,GAAG,MAAM3B,UAAU,GAAG4B,iBAAb,CAA+BF,GAA/B,EAAoC,MAApC,EAA4CZ,IAA5C,EAAkDO,OAAlD,CAArB;;AACA,QAAIM,MAAJ,EAAY;AACVE,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8Bf,IAAI,CAACC,SAAL,CAAeW,MAAf,CAA9B;AACAE,MAAAA,YAAY,CAACC,OAAb,CAAqB,SAArB,EAAgCf,IAAI,CAACC,SAAL,CAAeJ,cAAc,CAACmB,UAA9B,CAAhC;AACAzC,MAAAA,MAAM,CAAC0C,IAAP;AACD,KAnBkC,CAoBnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,MAAR;AAAgBrB,MAAAA,IAAI,GAAG,EAAvB;AAA2BO,MAAAA,OAAO,GAAG;AAArC,QAA2C,KAAKlB,KAAtD;AACA,WACE;AAAK,MAAA,SAAS,EAAC,cAAf;AAA8B,MAAA,EAAE,EAAC,aAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,UAAD;AAAY,MAAA,EAAE,EAAC,SAAf;AAAyB,MAAA,OAAO,EAAE,MAAMb,MAAM,CAAC0C,IAAP,EAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAIE;AACE,MAAA,SAAS,EAAC,6BADZ;AAEE,MAAA,KAAK,EAAE;AAAEI,QAAAA,SAAS,EAAE;AAAb,OAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAJF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCALF,CAJF,EAWE;AAAK,MAAA,SAAS,EAAC,oDAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEE,MAAC,WAAD;AACE,MAAA,QAAQ,EAAEb,OAAO,CAACC,GAAR,CAAYa,4BADxB;AAEE,MAAA,MAAM,EAAGC,WAAD,IACN,MAAC,MAAD;AACE,QAAA,OAAO,EAAC,UADV;AAEE,QAAA,SAAS,EAAE;AAAK,UAAA,KAAK,EAAE,EAAZ;AAAgB,UAAA,GAAG,EAAC,qBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFb;AAGE,QAAA,IAAI,EAAC,OAHP;AAIE,QAAA,OAAO,EAAEA,WAAW,CAACC,OAJvB;AAKE,QAAA,QAAQ,EAAED,WAAW,CAACE,QALxB;AAME,QAAA,KAAK,EAAE;AAAEC,UAAAA,aAAa,EAAE;AAAjB,SANT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAQE;AAAM,QAAA,SAAS,EAAC,mBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CARF,CAHJ;AAcE,MAAA,SAAS,EAAG7B,cAAD,IAAoB,KAAKD,cAAL,CAAoBC,cAApB,CAdjC,CAeI;AAfJ;AAgBE,MAAA,YAAY,EAAC,oBAhBf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAoBE,MAAC,WAAD;AAAa,MAAA,MAAM,EAAE,KAAKR,KAAL,CAAWC,SAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MApBF,CAXF,CADF;AAqCD;;AAtGkC;AAyGrC,MAAMqC,kBAAkB,GAAG;AACzB7C,EAAAA;AADyB,CAA3B;AAGA,eAAeH,OAAO,CAAC,IAAD,EAAOgD,kBAAP,CAAP,CAAkCzC,KAAlC,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport Router from 'next/router';\nimport GoogleLogin from 'react-google-login';\n\n// material\nimport Button from '@material-ui/core/Button';\nimport Divider from '@material-ui/core/Divider';\n// component\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport ButtonBack from '../../components/global-component/ButtonBack';\n\n// redux\n\nimport { showSnackbar } from '../../redux/snackbar/action';\nimport { isNotUndefined } from '../../utils/Validator';\nimport { BlockDialog } from '../../components/global-component/BlockDialog';\nimport ApiService from '../../utils/ApiService';\n\nexport class Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: false,\n    };\n  }\n\n  componentDidMount() {\n    document.body.style.background = 'white';\n    this.onSuccessLogin({})\n  }\n\n  /**\n   *  @summary this method mapping google response and get token then post it to backend, if success\n   *  the response google data will be saved on local\n   *  BE do validating to token given\n   * */\n\n  async onSuccessLogin(responseGoogle) {\n    this.setState({ isLoading: true });\n    const data = JSON.stringify({\n      access_token: responseGoogle.accessToken,\n      token_id: responseGoogle.tokenId,\n    });\n    const headers = {\n      'Content-Type': 'application/json',\n    };\n    const { showSnackbar } = this.props;\n\n    const BASE_URL = process.env.NEXT_PUBLIC_API_BASE_URL;\n    const url = `${BASE_URL}/customer/auth/social_login/google`;\n\n    const result = await ApiService().CommonNetworkCall(url, 'post', data, headers)\n    if (result) {\n      localStorage.setItem('token', JSON.stringify(result));\n      localStorage.setItem('profile', JSON.stringify(responseGoogle.profileObj));\n      Router.back();\n    }\n    //\n    // await axios\n    //   .post(url, data, { headers })\n    //   .then(async (apiResponse) => {\n    //     const { response, result } = apiResponse.data;\n    //     if (response.code !== '000000') {\n    //       showSnackbar('Terjadi Gangguan', 'error');\n    //       this.setState({ isLoading: false });\n    //     } else {\n    //       localStorage.setItem('token', JSON.stringify(result));\n    //       localStorage.setItem('profile', JSON.stringify(responseGoogle.profileObj));\n    //       Router.back();\n    //     }\n    //   }).catch((error) => {\n    //     if (isNotUndefined(error.response)) {\n    //       const { data } = error.response;\n    //       showSnackbar(data.response.user_errors, 'error');\n    //     } else {\n    //       showSnackbar(error.toString(), 'error');\n    //     }\n    //     this.setState({ isLoading: false });\n    //   });\n  }\n\n  render() {\n    const { path, method, data = '', headers = {}} = this.props\n    return (\n      <div className=\"main-content\" id=\"mainContent\">\n        <ButtonBack id=\"btnBack\" onClick={() => Router.back()} />\n        <Divider />\n        {/* Sementara */}\n        <div\n          className=\"txt-center-hoz font-muli-16\"\n          style={{ marginTop: '130px' }}\n        >\n          <p>Hi...</p>\n          <p>Selamat datang di BayarTagihan</p>\n        </div>\n        <div className=\"txt-center-hoz pointer margin-top-36 margin-btm-24\">\n\n          <GoogleLogin\n            clientId={process.env.NEXT_PUBLIC_GOOGLE_CLIENT_ID}\n            render={(renderProps) => (\n              <Button\n                variant=\"outlined\"\n                startIcon={<img width={16} src=\"/icon/ic_google.png\" />}\n                size=\"large\"\n                onClick={renderProps.onClick}\n                disabled={renderProps.disabled}\n                style={{ textTransform: 'none' }}\n              >\n                <span className=\"font-muli-14 bold\">Masuk atau daftar dengan Google</span>\n              </Button>\n            )}\n            onSuccess={(responseGoogle) => this.onSuccessLogin(responseGoogle)}\n              // onFailure={responseGoogle}\n            cookiePolicy=\"single_host_origin\"\n          />\n          <BlockDialog isOpen={this.state.isLoading} />\n        </div>\n      </div>\n\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  showSnackbar,\n};\nexport default connect(null, mapDispatchToProps)(Login);\n"]},"metadata":{},"sourceType":"module"}