{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\n/**\n * @summary this method is used to call flagr api with simple call\n * will return whether it enable or disable based on id given\n * @param id\n */\n\nexport function featureEnable(_x) {\n  return _featureEnable.apply(this, arguments);\n}\n\nfunction _featureEnable() {\n  _featureEnable = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(id) {\n    var enabled, BASE_URL, url;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            enabled = false; // const BASE_URL = getConfig().publicRuntimeConfig.NEXT_PUBLIC_API_FLAGR_URL;\n\n            BASE_URL = process.env.NEXT_PUBLIC_API_FLAGR_URL;\n            url = \"\".concat(BASE_URL, \"flags/\").concat(id);\n            _context.next = 5;\n            return axios.get(url).then(function (apiResponse) {\n              enabled = apiResponse.data.enabled;\n            })[\"catch\"](function () {\n              enabled = false;\n            });\n\n          case 5:\n            return _context.abrupt(\"return\", enabled);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _featureEnable.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/otnielvictoryfa/task2020/atur-tagihan/utils/Flagr.js"],"names":["axios","featureEnable","id","enabled","BASE_URL","process","env","NEXT_PUBLIC_API_FLAGR_URL","url","get","then","apiResponse","data"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAsBC,aAAtB;AAAA;AAAA;;;4EAAO,iBAA6BC,EAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AACDC,YAAAA,OADC,GACS,KADT,EAEL;;AACMC,YAAAA,QAHD,GAGYC,OAAO,CAACC,GAAR,CAAYC,yBAHxB;AAICC,YAAAA,GAJD,aAIUJ,QAJV,mBAI2BF,EAJ3B;AAAA;AAAA,mBAMCF,KAAK,CACRS,GADG,CACCD,GADD,EAEHE,IAFG,CAEE,UAACC,WAAD,EAAiB;AACrBR,cAAAA,OAAO,GAAGQ,WAAW,CAACC,IAAZ,CAAiBT,OAA3B;AACD,aAJG,WAKG,YAAM;AACXA,cAAAA,OAAO,GAAG,KAAV;AACD,aAPG,CAND;;AAAA;AAAA,6CAeEA,OAfF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import axios from 'axios';\n/**\n * @summary this method is used to call flagr api with simple call\n * will return whether it enable or disable based on id given\n * @param id\n */\n\nexport async function featureEnable(id) {\n  let enabled = false;\n  // const BASE_URL = getConfig().publicRuntimeConfig.NEXT_PUBLIC_API_FLAGR_URL;\n  const BASE_URL = process.env.NEXT_PUBLIC_API_FLAGR_URL;\n  const url = `${BASE_URL}flags/${id}`;\n\n  await axios\n    .get(url)\n    .then((apiResponse) => {\n      enabled = apiResponse.data.enabled;\n    })\n    .catch(() => {\n      enabled = false;\n    });\n\n  return enabled;\n}\n"]},"metadata":{},"sourceType":"module"}