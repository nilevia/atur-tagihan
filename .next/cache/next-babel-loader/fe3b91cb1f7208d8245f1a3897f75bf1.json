{"ast":null,"code":"import React, { Component } from 'react';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport { isNotUndefined } from './Validator';\nimport { showSnackbar } from '../redux/snackbar/action';\nexport class ApiService extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  async CommonNetworkCall(path, method, data = '', headers = {}) {\n    const {\n      showSnackbar\n    } = this.props;\n    const BASE_URL = process.env.NEXT_PUBLIC_API_BASE_URL;\n    const url = `${BASE_URL}${path}`;\n\n    let _axios;\n\n    switch (method) {\n      case 'get':\n        _axios = axios.get(url);\n        break;\n\n      case 'post':\n        _axios = axios.post(url, data, {\n          headers\n        });\n        break;\n\n      case 'delete':\n        _axios = axios.delete(url, {\n          headers\n        });\n        break;\n\n      case 'put':\n        _axios = axios.put(url, data, {\n          headers\n        });\n        break;\n\n      default:\n        _axios = axios();\n    }\n\n    await _axios.then(async apiResponse => {\n      const {\n        response,\n        result\n      } = apiResponse.data;\n\n      if (response.code !== '000000') {\n        showSnackbar('Terjadi Gangguan', 'error');\n        return null;\n      }\n\n      return result;\n    }).catch(async error => {\n      if (isNotUndefined(error.response)) {\n        const {\n          data\n        } = error.response;\n        showSnackbar(data.response.user_errors, 'error');\n      } else {\n        showSnackbar(error.toString(), 'error');\n      }\n\n      return null;\n    });\n  }\n\n}\nconst mapDispatchToProps = {\n  showSnackbar\n};\nexport default connect(null, mapDispatchToProps)(ApiService);","map":{"version":3,"sources":["/Users/otnielvictoryfa/task2020/atur-tagihan/utils/ApiService.js"],"names":["React","Component","axios","connect","isNotUndefined","showSnackbar","ApiService","constructor","props","state","CommonNetworkCall","path","method","data","headers","BASE_URL","process","env","NEXT_PUBLIC_API_BASE_URL","url","_axios","get","post","delete","put","then","apiResponse","response","result","code","catch","error","user_errors","toString","mapDispatchToProps"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,cAAT,QAA+B,aAA/B;AACA,SAASC,YAAT,QAA6B,0BAA7B;AAEA,OAAO,MAAMC,UAAN,SAAyBL,SAAzB,CAAmC;AACxCM,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa,EAAb;AAGD;;AAED,QAAMC,iBAAN,CAAwBC,IAAxB,EAA8BC,MAA9B,EAAsCC,IAAI,GAAG,EAA7C,EAAiDC,OAAO,GAAG,EAA3D,EAA+D;AAC7D,UAAM;AAAET,MAAAA;AAAF,QAAmB,KAAKG,KAA9B;AACA,UAAMO,QAAQ,GAAGC,OAAO,CAACC,GAAR,CAAYC,wBAA7B;AACA,UAAMC,GAAG,GAAI,GAAEJ,QAAS,GAAEJ,IAAK,EAA/B;;AAEA,QAAIS,MAAJ;;AACA,YAAQR,MAAR;AACE,WAAK,KAAL;AACEQ,QAAAA,MAAM,GAAGlB,KAAK,CAACmB,GAAN,CAAUF,GAAV,CAAT;AACA;;AACF,WAAK,MAAL;AACEC,QAAAA,MAAM,GAAGlB,KAAK,CAACoB,IAAN,CAAWH,GAAX,EAAgBN,IAAhB,EAAsB;AAAEC,UAAAA;AAAF,SAAtB,CAAT;AACA;;AACF,WAAK,QAAL;AACEM,QAAAA,MAAM,GAAGlB,KAAK,CAACqB,MAAN,CAAaJ,GAAb,EAAkB;AAAEL,UAAAA;AAAF,SAAlB,CAAT;AACA;;AACF,WAAK,KAAL;AACEM,QAAAA,MAAM,GAAGlB,KAAK,CAACsB,GAAN,CAAUL,GAAV,EAAeN,IAAf,EAAqB;AAAEC,UAAAA;AAAF,SAArB,CAAT;AACA;;AACF;AACEM,QAAAA,MAAM,GAAGlB,KAAK,EAAd;AAdJ;;AAgBA,UAAMkB,MAAM,CACTK,IADG,CACE,MAAOC,WAAP,IAAuB;AAC3B,YAAM;AAAEC,QAAAA,QAAF;AAAYC,QAAAA;AAAZ,UAAuBF,WAAW,CAACb,IAAzC;;AAEA,UAAIc,QAAQ,CAACE,IAAT,KAAkB,QAAtB,EAAgC;AAC9BxB,QAAAA,YAAY,CAAC,kBAAD,EAAqB,OAArB,CAAZ;AACA,eAAO,IAAP;AACD;;AACD,aAAOuB,MAAP;AACD,KATG,EAUHE,KAVG,CAUG,MAAOC,KAAP,IAAiB;AACtB,UAAI3B,cAAc,CAAC2B,KAAK,CAACJ,QAAP,CAAlB,EAAoC;AAClC,cAAM;AAAEd,UAAAA;AAAF,YAAWkB,KAAK,CAACJ,QAAvB;AACAtB,QAAAA,YAAY,CAACQ,IAAI,CAACc,QAAL,CAAcK,WAAf,EAA4B,OAA5B,CAAZ;AACD,OAHD,MAGO;AACL3B,QAAAA,YAAY,CAAC0B,KAAK,CAACE,QAAN,EAAD,EAAmB,OAAnB,CAAZ;AACD;;AACD,aAAO,IAAP;AACD,KAlBG,CAAN;AAmBD;;AAjDuC;AAoD1C,MAAMC,kBAAkB,GAAG;AACzB7B,EAAAA;AADyB,CAA3B;AAGA,eAAeF,OAAO,CAAC,IAAD,EAAO+B,kBAAP,CAAP,CAAkC5B,UAAlC,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport { isNotUndefined } from './Validator';\nimport { showSnackbar } from '../redux/snackbar/action';\n\nexport class ApiService extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n\n    };\n  }\n\n  async CommonNetworkCall(path, method, data = '', headers = {}) {\n    const { showSnackbar } = this.props;\n    const BASE_URL = process.env.NEXT_PUBLIC_API_BASE_URL;\n    const url = `${BASE_URL}${path}`;\n\n    let _axios;\n    switch (method) {\n      case 'get':\n        _axios = axios.get(url);\n        break;\n      case 'post':\n        _axios = axios.post(url, data, { headers });\n        break;\n      case 'delete':\n        _axios = axios.delete(url, { headers });\n        break;\n      case 'put':\n        _axios = axios.put(url, data, { headers });\n        break;\n      default:\n        _axios = axios();\n    }\n    await _axios\n      .then(async (apiResponse) => {\n        const { response, result } = apiResponse.data;\n\n        if (response.code !== '000000') {\n          showSnackbar('Terjadi Gangguan', 'error');\n          return null;\n        }\n        return result;\n      })\n      .catch(async (error) => {\n        if (isNotUndefined(error.response)) {\n          const { data } = error.response;\n          showSnackbar(data.response.user_errors, 'error');\n        } else {\n          showSnackbar(error.toString(), 'error');\n        }\n        return null;\n      });\n  }\n}\n\nconst mapDispatchToProps = {\n  showSnackbar,\n};\nexport default connect(null, mapDispatchToProps)(ApiService);\n"]},"metadata":{},"sourceType":"module"}