{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Router from 'next/router'; // material\n\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Timer from '@material-ui/icons/Timer';\nimport Divider from '@material-ui/core/Divider';\nimport CircularProgress from '@material-ui/core/CircularProgress'; // component\n\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport SuccessPayment from '../../../components/status-pembayaran/SuccessPayment';\nimport MainLogo from '../../../components/global-component/MainLogo';\nimport { getRupiah } from '../../../utils/Calculate';\nimport { copyToClipboard, getHashUrl } from '../../../utils/CommonUtils';\nimport ButtonMain from '../../../components/global-component/ButtonMain';\nimport ProductOrderDetail from '../../../components/status-pembayaran/ProductOrderDetail'; // redux\n\nimport { showSnackbar } from '../../../redux/snackbar/action';\nimport { showDialogOrderDetail } from '../../../redux/productOrderDetail/action';\nimport { isNotUndefined } from '../../../utils/Validator';\nimport { PaymentInstruction } from '../../../components/status-pembayaran/PaymentInstruction';\nimport { CountDownHourly } from '@nilevia/count-down-timer-react';\nexport class StatusPembayaran extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      countDown: {\n        hours: 0,\n        min: 0,\n        sec: 0\n      },\n      orderId: 0,\n      isLoading: true,\n      paymentOrder: {\n        status: null,\n        payment_expired: null,\n        payment_bank_account: 0,\n        total: 0,\n        payment_method_id: 0,\n        payment_method_name: '-',\n        items: [] // next admin fee will be here\n\n      },\n      paymentInfo: {\n        bank_name: '-',\n        instruction_message: '-',\n        icon: null\n      }\n    };\n  }\n\n  componentDidMount() {\n    document.body.className = 'body-blue';\n    const orderId = getHashUrl();\n    this.setState({\n      orderId\n    });\n    this.getPaymentOrder(orderId); //localStorage.clear();\n\n    localStorage.removeItem('cId');\n  }\n\n  componentWillUnmount() {\n    document.body.className = null;\n  }\n  /**\n   * @method getPaymentOrder\n   * @summary to get payment order detail by order id that inserted on url\n   * @param orderId\n   * @returns {Promise<void>}\n   */\n\n\n  async getPaymentOrder(orderId) {\n    const {\n      showSnackbar\n    } = this.props;\n    const BASE_URL = process.env.NEXT_PUBLIC_API_BASE_URL;\n    const url = `${BASE_URL}/order/atur_tagihan/${orderId}`;\n    await axios.get(url).then(async apiResponse => {\n      const {\n        response,\n        result\n      } = apiResponse.data;\n\n      if (response.code !== '000000') {\n        showSnackbar('Terjadi Gangguan', 'error');\n        this.setState({\n          isLoading: false\n        });\n      } else {\n        this.setState({\n          paymentOrder: result\n        });\n        this.getPaymentInfo(result.payment_method_id);\n      }\n    }).catch(async error => {\n      if (isNotUndefined(error.response)) {\n        const {\n          data\n        } = error.response;\n        showSnackbar(data.response.user_errors, 'error');\n      } else {\n        showSnackbar(error.toString(), 'error');\n      }\n\n      this.setState({\n        isLoading: false\n      });\n    });\n  }\n  /**\n   * @method getPaymentInfor\n   * @summary this method is used to bet get payment info based on id given on the first api call\n   * @param id\n   * @returns {Promise<void>}\n   */\n\n\n  async getPaymentInfo(id) {\n    const {\n      showSnackbar\n    } = this.props;\n    const BASE_URL = process.env.NEXT_PUBLIC_API_BASE_URL;\n    const url = `${BASE_URL}/payment_method/${id}`;\n    await axios.get(url).then(async apiResponse => {\n      const {\n        response,\n        result\n      } = apiResponse.data;\n\n      if (response.code !== '000000') {\n        showSnackbar('Terjadi Gangguan', 'error');\n      } else {\n        this.setState({\n          paymentInfo: result\n        });\n      }\n\n      this.setState({\n        isLoading: false\n      });\n    }).catch(async error => {\n      if (isNotUndefined(error.response)) {\n        const {\n          data\n        } = error.response;\n        showSnackbar(data.response.user_errors, 'error');\n      } else {\n        showSnackbar(error.toString(), 'error');\n      }\n\n      this.setState({\n        isLoading: false\n      });\n    });\n  }\n  /**\n   * @method copyText\n   * @summary copy given text and wait till i success then display the snackbar\n   * @param (text) to copy\n   * */\n\n\n  async copyText(text) {\n    await copyToClipboard(text);\n    this.props.showSnackbar('Berhasil disalin', 'success');\n  }\n  /**\n   * @method onRefresh\n   * @summary this is just dummy, next will hit end point\n   */\n\n\n  onRefresh() {\n    this.setState({\n      isLoading: true\n    });\n    this.getPaymentOrder(this.state.orderId);\n  }\n\n  render() {\n    const {\n      orderId,\n      paymentOrder,\n      paymentInfo,\n      isLoading\n    } = this.state;\n    const {\n      showDialogOrderDetail\n    } = this.props;\n    let mainContent;\n\n    const timerSection = __jsx(\"div\", {\n      className: \"flex\"\n    }, __jsx(Timer, {\n      className: \"margin-rgt-16\"\n    }), __jsx(\"div\", null, __jsx(\"p\", {\n      className: \"font-muli-12 \"\n    }, \"Sisa waktu\"), __jsx(CountDownHourly, {\n      endDate: paymentOrder.payment_expired,\n      className: \"font-muli-16 red bold\"\n    })));\n\n    if (paymentOrder.status === 3) {\n      // const splittedInstruction = paymentInfo.instruction_message.split('\\n');\n      mainContent = __jsx(\"div\", {\n        id: \"waitingPayment\"\n      }, __jsx(\"p\", {\n        className: \"font-muli-14 white margin-btm-32\"\n      }, \"Klik refresh untuk mengupdate halaman ini dan melihat status pembayaran anda\"), __jsx(Paper, {\n        className: \"padding-22 margin-btm-16\",\n        elevation: 0\n      }, __jsx(Grid, {\n        container: true,\n        direction: \"row\",\n        justify: \"space-between\",\n        className: \"margin-btm-16 txt-center-ver\"\n      }, __jsx(Grid, null, timerSection), __jsx(Grid, null, __jsx(ButtonMain, {\n        id: \"refreshButton\",\n        color: \"primary\",\n        size: \"large\",\n        onClick: () => this.onRefresh()\n      }, \"REFRESH\"))), __jsx(Divider, null), __jsx(Grid, {\n        container: true,\n        direction: \"row\",\n        justify: \"space-between\",\n        className: \"margin-top-24 margin-btm-24 txt-center-ver\"\n      }, __jsx(Grid, null, __jsx(\"p\", {\n        className: \"font-muli-14\"\n      }, paymentOrder.items.length > 1 ? 'Tagihan + Produk' : 'Tagihan')), __jsx(Grid, null, __jsx(\"p\", {\n        id: \"dialogOrderDetail\",\n        className: \"font-muli-16 light-blue bold\",\n        onClick: () => showDialogOrderDetail(paymentOrder.items, paymentOrder.total, paymentOrder.admin_fee)\n      }, \"LIHAT DETAIL\"))), __jsx(ProductOrderDetail, null), __jsx(Divider, null), __jsx(\"div\", {\n        className: \"flex margin-btm-24 margin-top-16\"\n      }, __jsx(\"span\", {\n        className: \"grey-dot margin-rgt-8\"\n      }), __jsx(\"div\", null, __jsx(\"p\", {\n        className: \"font-muli-14\"\n      }, \"Status pembayaran\"), __jsx(\"p\", {\n        className: \"font-muli-16 bold\"\n      }, \"Menunggu pembayaran\"))), __jsx(Divider, null), __jsx(Grid, {\n        container: true,\n        direction: \"row\",\n        justify: \"space-between\",\n        className: \"margin-top-24\"\n      }, __jsx(Grid, null, __jsx(\"p\", {\n        className: \"font-muli-14\"\n      }, \"Metode Pembayaran\"), __jsx(\"p\", {\n        className: \"font-muli-16 bold\"\n      }, paymentOrder.payment_method_name)), __jsx(Grid, null, __jsx(\"img\", {\n        src: paymentInfo.icon,\n        className: \"payment-method-status-image\"\n      }))), __jsx(Grid, {\n        container: true,\n        direction: \"row\",\n        justify: \"space-between\",\n        className: \"margin-top-16 txt-center-ver payment-identification-bg\"\n      }, __jsx(Grid, null, __jsx(\"p\", {\n        className: \"font-muli-14\"\n      }, \"Nomor rekening\"), __jsx(\"p\", {\n        className: \"font-muli-18 bold\"\n      }, paymentOrder.payment_bank_account)), __jsx(Grid, null, __jsx(\"p\", {\n        id: \"copyBillerAccount\",\n        onClick: () => this.copyText(paymentOrder.payment_bank_account),\n        className: \"font-muli-14 dark-blue bold\"\n      }, \"SALIN\"))), __jsx(\"p\", {\n        className: \"font-muli-14 margin-top-24\"\n      }, \"Tagihan anda\"), __jsx(Grid, {\n        container: true,\n        direction: \"row\",\n        justify: \"space-between\",\n        className: \"margin-top-16 txt-center-ver payment-identification-bg\"\n      }, __jsx(Grid, null, __jsx(\"p\", {\n        className: \"font-muli-14\"\n      }, \"Total tagihan\"), __jsx(\"p\", {\n        className: \"font-muli-18 bold\"\n      }, getRupiah(paymentOrder.total))), __jsx(Grid, null, __jsx(\"p\", {\n        id: \"copyTotalPayment\",\n        onClick: () => this.copyText(paymentOrder.total),\n        className: \"font-muli-14 dark-blue bold\"\n      }, \"SALIN\")))), PaymentInstruction(paymentInfo));\n    } else if (paymentOrder.status === 4) {\n      // Router.push('/pembayaran-berhasil');\n      mainContent = __jsx(SuccessPayment, {\n        items: paymentOrder.items\n      });\n    } else if (paymentOrder.status === 6) {\n      mainContent = __jsx(\"div\", {\n        id: \"onfailedPayment\"\n      }, __jsx(Paper, {\n        className: \"padding-22\",\n        elevation: 0\n      }, timerSection, __jsx(\"div\", {\n        className: \"flex margin-btm-24 margin-top-16\"\n      }, __jsx(\"span\", {\n        className: \"red-dot margin-rgt-8\"\n      }), __jsx(\"div\", null, __jsx(\"p\", {\n        className: \"font-muli-14\"\n      }, \"Status pembayaran\"), __jsx(\"p\", {\n        className: \"font-muli-16 bold\"\n      }, \"Expired\"))), __jsx(\"p\", {\n        className: \"font-muli-14 margin-btm-16\"\n      }, \"Waktu pembayaran telah habis. Silahkan pilih ulang metode pembayaran\"), __jsx(ButtonMain, {\n        id: \"detailTagihanButton\",\n        color: \"primary\",\n        width: \"fullWidth\",\n        size: \"large\",\n        onClick: () => Router.push(`/detail-tagihan/${orderId}`)\n      }, \"Ke Detail Tagihan\")));\n    } else {\n      mainContent = null;\n    }\n\n    return __jsx(\"div\", null, __jsx(MainLogo, null), isLoading ? __jsx(CircularProgress, {\n      style: {\n        position: 'absolute',\n        left: '47%',\n        top: '50%'\n      }\n    }) : __jsx(\"div\", {\n      className: \"main-content\",\n      id: \"mainContent\"\n    }, mainContent));\n  }\n\n}\nconst mapDispatchToProps = {\n  showSnackbar,\n  showDialogOrderDetail\n};\nexport default connect(null, mapDispatchToProps)(StatusPembayaran);","map":null,"metadata":{},"sourceType":"module"}