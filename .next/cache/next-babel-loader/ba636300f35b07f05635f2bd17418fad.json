{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport axios from 'axios';\nimport Router from 'next/router';\nimport { isNotUndefined } from './Validator'; // notes\n// ada masalah dengan react hooks sehingga showSnackbar dijadikan\n// parameter dan disupply dari component\n// unit test selanjutnya tidak perlu mengetes skenario error, hanya sukses\n\n/**\n * @summary memanggil api tanpa auth\n * @param path (url setelah api/v1\n * @param method\n * @param showSnackbar gunakan this.props.showSnackbar jika ingin default atau gunakan () => {} jika ingin custom dari page\n * @param dataRequest (bisa dikosongi)\n * @param headers (bisa dikosongi)\n * @returns {Promise<AxiosResponse<any>>}\n * @constructor\n */\n\nexport async function CommonNetworkCall(path, method, showSnackbar, dataRequest = '', headers = {}) {\n  const BASE_URL = process.env.NEXT_PUBLIC_API_BASE_URL;\n  const url = `${BASE_URL}${path}`; // eslint-disable-next-line no-use-before-define,no-return-await\n\n  return await axiosService(method, url, dataRequest, headers).then(apiResponse => {\n    const {\n      response,\n      result\n    } = apiResponse.data;\n\n    if (response.code !== '000000') {\n      showSnackbar('Terjadi Gangguan', 'error');\n      return null;\n    }\n\n    return result;\n  }).catch(error => {\n    if (isNotUndefined(error.response)) {\n      const {\n        data\n      } = error.response;\n      showSnackbar(data.response.user_errors, 'error');\n    } else {\n      showSnackbar(error.toString(), 'error');\n    }\n\n    return null;\n  });\n}\n/**\n * @summary call api using auth that placed at header, if get 401 we should call refresh token\n * but now then refresh token end point not ready yet, so we directly go to login page and clear storage\n * @param path\n * @param method\n * @param showSnackbar, gunakan this.props.showSnackbar jika ingin default atau gunakan () => {} jika ingin custom dari page\n * @param dataRequest\n * @param customHeader\n * @returns {Promise<AxiosResponse<any>>}\n * @constructor\n */\n\nexport async function AuthNetworkCall(path, method, showSnackbar, dataRequest = '', customHeader = {}) {\n  const BASE_URL = process.env.NEXT_PUBLIC_API_BASE_URL;\n  const url = `${BASE_URL}${path}`;\n  const token = JSON.parse(localStorage.getItem('token'));\n  let headers;\n\n  if (token) {\n    headers = _objectSpread(_objectSpread({}, customHeader), {}, {\n      Authorization: `Bearer ${token.access_token}`\n    });\n  } else {\n    showSnackbar('Silahkan login terlebih dahulu', 'error');\n    doLogout();\n    return null;\n  } // };\n  // eslint-disable-next-line no-use-before-define,no-return-await\n\n\n  return await axiosService(method, url, dataRequest, headers).then(apiResponse => {\n    const {\n      response,\n      result\n    } = apiResponse.data;\n\n    if (response.code !== '000000') {\n      showSnackbar('Terjadi Gangguan', 'error');\n      return null;\n    }\n\n    return result;\n  }).catch(error => {\n    if (isNotUndefined(error.response)) {\n      const {\n        data\n      } = error.response;\n\n      if (error.response.status === 401) {\n        showSnackbar('Terjadi masalah, silahkan login terlebih dahulu', 'error');\n        doLogout();\n      } else if (error.response.status === 403) {\n        showSnackbar('Akun anda tidak aktif atau terblokir, silahkan gunakan akun lain', 'error');\n        doLogout();\n      } else showSnackbar(data.response.user_errors, 'error');\n    } else {\n      showSnackbar(error.toString(), 'error');\n    }\n\n    return null;\n  });\n}\n\nfunction doLogout() {\n  localStorage.clear();\n  Router.push('/login');\n}\n\nfunction axiosService(method, url, dataRequest = '', headers = {}) {\n  switch (method) {\n    case 'get':\n      return axios.get(url, {\n        headers\n      });\n\n    case 'post':\n      return axios.post(url, dataRequest, {\n        headers\n      });\n\n    case 'delete':\n      return axios.delete(url, {\n        headers\n      });\n\n    case 'put':\n      return axios.put(url, dataRequest, {\n        headers\n      });\n\n    default:\n      return axios();\n  }\n}\n/**\n * @summary get user status\n *  empty = if no user logged\n *  logged = if user logged and token active\n *  expired = if token expired\n *  inactive = if user blocked\n *  error = if network error\n * @returns {Promise<string>}\n */\n\n\nexport async function isUserLoggedValid() {\n  const URL = `${process.env.NEXT_PUBLIC_API_BASE_URL}/customer/profile`;\n  let headers;\n  const token = JSON.parse(localStorage.getItem('token'));\n\n  if (token) {\n    headers = {\n      Authorization: `Bearer ${token.access_token}`\n    };\n  } else {\n    return 'empty';\n  } // eslint-disable-next-line no-return-await\n\n\n  return await axios.get(URL, {\n    headers\n  }).then(() => 'logged').catch(error => {\n    if (isNotUndefined(error.response)) {\n      if (error.response.status === 401) {\n        return 'expired';\n      }\n\n      if (error.response.status === 403) {\n        return 'inactive';\n      }\n\n      return 'error';\n    }\n\n    return 'error';\n  });\n}","map":null,"metadata":{},"sourceType":"module"}