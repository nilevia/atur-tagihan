{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React from 'react';\nimport axios from 'axios';\nimport { useDispatch } from 'react-redux';\nimport { isNotUndefined } from './Validator';\nimport { showSnackbar } from '../redux/snackbar/action';\nexport default function CommonNetworkCall(_x, _x2) {\n  return _CommonNetworkCall.apply(this, arguments);\n}\n_c2 = CommonNetworkCall;\n\nfunction _CommonNetworkCall() {\n  var _s = $RefreshSig$();\n\n  _CommonNetworkCall = _asyncToGenerator(_s( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(path, method) {\n    var data,\n        headers,\n        dispatch,\n        BASE_URL,\n        url,\n        _axios,\n        _args3 = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _s();\n\n            data = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : '';\n            headers = _args3.length > 3 && _args3[3] !== undefined ? _args3[3] : {};\n            dispatch = useDispatch();\n            BASE_URL = process.env.NEXT_PUBLIC_API_BASE_URL;\n            url = \"\".concat(BASE_URL).concat(path);\n            _context3.t0 = method;\n            _context3.next = _context3.t0 === 'get' ? 9 : _context3.t0 === 'post' ? 11 : _context3.t0 === 'delete' ? 13 : _context3.t0 === 'put' ? 15 : 17;\n            break;\n\n          case 9:\n            _axios = axios.get(url);\n            return _context3.abrupt(\"break\", 18);\n\n          case 11:\n            _axios = axios.post(url, data, {\n              headers: headers\n            });\n            return _context3.abrupt(\"break\", 18);\n\n          case 13:\n            _axios = axios[\"delete\"](url, {\n              headers: headers\n            });\n            return _context3.abrupt(\"break\", 18);\n\n          case 15:\n            _axios = axios.put(url, data, {\n              headers: headers\n            });\n            return _context3.abrupt(\"break\", 18);\n\n          case 17:\n            _axios = axios();\n\n          case 18:\n            _context3.next = 20;\n            return _axios.then( /*#__PURE__*/function () {\n              var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(apiResponse) {\n                var _apiResponse$data, response, result;\n\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        _apiResponse$data = apiResponse.data, response = _apiResponse$data.response, result = _apiResponse$data.result;\n\n                        if (!(response.code !== '000000')) {\n                          _context.next = 4;\n                          break;\n                        }\n\n                        dispatch(showSnackbar('Terjadi Gangguan', 'error'));\n                        return _context.abrupt(\"return\", null);\n\n                      case 4:\n                        return _context.abrupt(\"return\", result);\n\n                      case 5:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee);\n              }));\n\n              return function (_x3) {\n                return _ref.apply(this, arguments);\n              };\n            }())[\"catch\"]( /*#__PURE__*/function () {\n              var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(error) {\n                var _data;\n\n                return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                  while (1) {\n                    switch (_context2.prev = _context2.next) {\n                      case 0:\n                        if (isNotUndefined(error.response)) {\n                          _data = error.response.data;\n                          dispatch(showSnackbar(_data.response.user_errors, 'error'));\n                        } else {\n                          dispatch(showSnackbar(error.toString(), 'error'));\n                        }\n\n                        return _context2.abrupt(\"return\", null);\n\n                      case 2:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }\n                }, _callee2);\n              }));\n\n              return function (_x4) {\n                return _ref2.apply(this, arguments);\n              };\n            }());\n\n          case 20:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }), \"rgTLoBID190wEKCp9+G8W6F7A5M=\", false, function () {\n    return [useDispatch];\n  }));\n  return _CommonNetworkCall.apply(this, arguments);\n}\n\n_c = CommonNetworkCall;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CommonNetworkCall\");\n$RefreshReg$(_c2, \"CommonNetworkCall\");","map":{"version":3,"sources":["/Users/otnielvictoryfa/task2020/atur-tagihan/utils/CommonNetworkCall.js"],"names":["React","axios","useDispatch","isNotUndefined","showSnackbar","CommonNetworkCall","path","method","data","headers","dispatch","BASE_URL","process","env","NEXT_PUBLIC_API_BASE_URL","url","_axios","get","post","put","then","apiResponse","response","result","code","error","user_errors","toString"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,cAAT,QAA+B,aAA/B;AACA,SAASC,YAAT,QAA6B,0BAA7B;AAEA,wBAA8BC,iBAA9B;AAAA;AAAA;MAA8BA,iB;;;;;mFAAf,kBAAiCC,IAAjC,EAAuCC,MAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAA+CC,YAAAA,IAA/C,8DAAsD,EAAtD;AAA0DC,YAAAA,OAA1D,8DAAoE,EAApE;AACPC,YAAAA,QADO,GACIR,WAAW,EADf;AAGPS,YAAAA,QAHO,GAGIC,OAAO,CAACC,GAAR,CAAYC,wBAHhB;AAIPC,YAAAA,GAJO,aAIEJ,QAJF,SAIaL,IAJb;AAAA,2BAOLC,MAPK;AAAA,8CAQN,KARM,wBAWN,MAXM,yBAcN,QAdM,yBAiBN,KAjBM;AAAA;;AAAA;AASTS,YAAAA,MAAM,GAAGf,KAAK,CAACgB,GAAN,CAAUF,GAAV,CAAT;AATS;;AAAA;AAYTC,YAAAA,MAAM,GAAGf,KAAK,CAACiB,IAAN,CAAWH,GAAX,EAAgBP,IAAhB,EAAsB;AAAEC,cAAAA,OAAO,EAAPA;AAAF,aAAtB,CAAT;AAZS;;AAAA;AAeTO,YAAAA,MAAM,GAAGf,KAAK,UAAL,CAAac,GAAb,EAAkB;AAAEN,cAAAA,OAAO,EAAPA;AAAF,aAAlB,CAAT;AAfS;;AAAA;AAkBTO,YAAAA,MAAM,GAAGf,KAAK,CAACkB,GAAN,CAAUJ,GAAV,EAAeP,IAAf,EAAqB;AAAEC,cAAAA,OAAO,EAAPA;AAAF,aAArB,CAAT;AAlBS;;AAAA;AAqBTO,YAAAA,MAAM,GAAGf,KAAK,EAAd;;AArBS;AAAA;AAAA,mBAuBPe,MAAM,CACTI,IADG;AAAA,kFACE,iBAAOC,WAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,4CACyBA,WAAW,CAACb,IADrC,EACIc,QADJ,qBACIA,QADJ,EACcC,MADd,qBACcA,MADd;;AAAA,8BAGAD,QAAQ,CAACE,IAAT,KAAkB,QAHlB;AAAA;AAAA;AAAA;;AAIFd,wBAAAA,QAAQ,CAACN,YAAY,CAAC,kBAAD,EAAqB,OAArB,CAAb,CAAR;AAJE,yDAKK,IALL;;AAAA;AAAA,yDAOGmB,MAPH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF;;AAAA;AAAA;AAAA;AAAA;AAAA,mFAUG,kBAAOE,KAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AACL,4BAAItB,cAAc,CAACsB,KAAK,CAACH,QAAP,CAAlB,EAAoC;AAC1Bd,0BAAAA,KAD0B,GACjBiB,KAAK,CAACH,QADW,CAC1Bd,IAD0B;AAElCE,0BAAAA,QAAQ,CAACN,YAAY,CAACI,KAAI,CAACc,QAAL,CAAcI,WAAf,EAA4B,OAA5B,CAAb,CAAR;AACD,yBAHD,MAGO;AACLhB,0BAAAA,QAAQ,CAACN,YAAY,CAACqB,KAAK,CAACE,QAAN,EAAD,EAAmB,OAAnB,CAAb,CAAR;AACD;;AANI,0DAOE,IAPF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAVH;;AAAA;AAAA;AAAA;AAAA,gBAvBO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;YACIzB,W;;;;;KADWG,iB","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport { useDispatch } from 'react-redux';\nimport { isNotUndefined } from './Validator';\nimport { showSnackbar } from '../redux/snackbar/action';\n\nexport default async function CommonNetworkCall(path, method, data = '', headers = {}) {\n  const dispatch = useDispatch();\n\n  const BASE_URL = process.env.NEXT_PUBLIC_API_BASE_URL;\n  const url = `${BASE_URL}${path}`;\n\n  let _axios;\n  switch (method) {\n    case 'get':\n      _axios = axios.get(url);\n      break;\n    case 'post':\n      _axios = axios.post(url, data, { headers });\n      break;\n    case 'delete':\n      _axios = axios.delete(url, { headers });\n      break;\n    case 'put':\n      _axios = axios.put(url, data, { headers });\n      break;\n    default:\n      _axios = axios();\n  }\n  await _axios\n    .then(async (apiResponse) => {\n      const { response, result } = apiResponse.data;\n\n      if (response.code !== '000000') {\n        dispatch(showSnackbar('Terjadi Gangguan', 'error'));\n        return null;\n      }\n      return result;\n    })\n    .catch(async (error) => {\n      if (isNotUndefined(error.response)) {\n        const { data } = error.response;\n        dispatch(showSnackbar(data.response.user_errors, 'error'));\n      } else {\n        dispatch(showSnackbar(error.toString(), 'error'));\n      }\n      return null;\n    });\n}\n\n"]},"metadata":{},"sourceType":"module"}