{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react'; // eslint-disable-next-line import/no-extraneous-dependencies\n\nimport clsx from 'clsx';\nimport Button from '@material-ui/core/Button';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nvar useStyles = makeStyles(function () {\n  return {\n    buttonPreferences: {\n      fontStyle: 'normal',\n      fontWeight: 'bold',\n      alignItems: 'center',\n      textAlign: 'center',\n      letterSpacing: '0.01em',\n      textTransform: 'none'\n    },\n    primary: {\n      color: '#FFFFFF',\n      backgroundColor: '#f5a623',\n      '&:hover': {\n        backgroundColor: '#f5a623'\n      }\n    },\n    secondary: {\n      color: '#2d4689',\n      backgroundColor: '#FFFFFF',\n      '&:hover': {\n        backgroundColor: '#FFFFFF'\n      }\n    },\n    accent: {\n      color: '#FFFFFF',\n      backgroundColor: '#2d4689',\n      '&:hover': {\n        backgroundColor: '#2d4689'\n      }\n    },\n    //\n    // unavailable: {\n    //     //backgroundColor: \"#DF4C73\",\n    //     color: '#707070',\n    // },\n    buttonLarge: {\n      height: '46px',\n      minWidth: '135px',\n      fontSize: '16px'\n    },\n    buttonSmall: {\n      height: '36px',\n      minWidth: '130px',\n      fontSize: '14px'\n    }\n  };\n});\n/**\n * Custom Button based on Atur Tagihan Style\n * accepted props :\n *      color => to change backgroud color of button {primary, secondary, error, unavailable}\n *      size => custom size {large, small}, default based on text\n *      width => custom width {..px, fullwidth}\n *      onClick => onClick action\n *      startIcon => add icon before text\n *      disable => disable option button\n * @param props\n * @returns {*}\n * @constructor\n *\n * otniel 3 Jul 2020\n */\n\nexport default function ButtonMain(props) {\n  var classes = useStyles();\n  var colorButton = props.color;\n  var sizeButton = props.size;\n  var widthButton = props.width;\n\n  if (widthButton === 'fullWidth') {\n    widthButton = '100%';\n  } else {\n    widthButton = props.width;\n  }\n\n  switch (colorButton) {\n    case 'primary':\n      colorButton = classes.primary;\n      break;\n\n    case 'secondary':\n      colorButton = classes.secondary;\n      break;\n\n    case 'accent':\n      colorButton = classes.accent;\n      break;\n    // case 'unavailable':\n    //     colorButton = classes.unavailable;\n    //     break;\n  }\n\n  switch (sizeButton) {\n    case 'large':\n      sizeButton = classes.buttonLarge;\n      break;\n\n    case 'small':\n      sizeButton = classes.buttonSmall;\n      break;\n  }\n\n  return __jsx(\"div\", {\n    className: props.className,\n    style: {\n      width: \"\".concat(widthButton)\n    }\n  }, __jsx(Button, {\n    id: \"mainButton\",\n    type: props.type,\n    variant: \"contained\",\n    className: clsx(colorButton, sizeButton, classes.buttonPreferences),\n    onClick: props.onClick,\n    disabled: !!props.disabled,\n    fullWidth: !!props.width,\n    startIcon: props.startIcon\n  }, props.children));\n}","map":null,"metadata":{},"sourceType":"module"}