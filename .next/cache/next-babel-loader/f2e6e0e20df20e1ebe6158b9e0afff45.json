{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Router from 'next/router'; // material\n\nimport { Divider } from '@material-ui/core';\nimport TextField from '@material-ui/core/TextField';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Grid from '@material-ui/core/Grid';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport AppBar from '@material-ui/core/AppBar'; // component\\\n\nimport { connect } from 'react-redux';\nimport ButtonBack from '../../components/global-component/ButtonBack';\nimport ButtonMain from '../../components/global-component/ButtonMain';\nimport { meterValidation, phoneReplace, phoneValidation } from '../../utils/Validator';\nimport ProductItem from '../../components/additional-product/ProductItem'; // redux\n\nimport { showSnackbar } from '../../redux/snackbar/action';\nimport { getRupiah } from '../../utils/Calculate';\nimport { BlockDialog } from '../../components/global-component/BlockDialog';\nimport { AuthNetworkCall } from '../../utils/NetworkCall';\nexport var TokenListrik = /*#__PURE__*/function (_Component) {\n  _inherits(TokenListrik, _Component);\n\n  var _super = _createSuper(TokenListrik);\n\n  function TokenListrik(props) {\n    var _this;\n\n    _classCallCheck(this, TokenListrik);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      isLoading: false,\n      isLoadingPriceList: true,\n      errorMeterNumber: false,\n      errorPhoneNumber: false,\n      displayContent: 1,\n      phoneNumber: '',\n      meterNumber: '',\n      priceList: [],\n      inquiryData: {\n        product_name: '-',\n        amount: '-',\n        data: {\n          subscriber_name: '-',\n          material_number: '-',\n          subscriber_id: '-',\n          subscriber_segmentation: '-',\n          power: '-',\n          phone_number: '-'\n        }\n      },\n      isAturTagihan: false\n    };\n    return _this;\n  }\n\n  _createClass(TokenListrik, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      document.body.style.background = 'white';\n      this.getPriceList();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      document.body.style = null;\n    }\n    /**\n     * @method phoneNumberWatcher\n     * @summary this function will do a simple validation for phone number\n     * then will set button enable\n     * @param event\n     */\n\n  }, {\n    key: \"phoneNumberWatcher\",\n    value: function () {\n      var _phoneNumberWatcher = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n        var value, phoneNumber;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                value = event.target.value; // change input to match format\n\n                _context.next = 3;\n                return this.setState({\n                  phoneNumber: phoneReplace(value)\n                });\n\n              case 3:\n                phoneNumber = this.state.phoneNumber;\n\n                if (phoneNumber.length < 1) {\n                  this.setState({\n                    errorPhoneNumber: false\n                  });\n                } else {\n                  this.setState({\n                    errorPhoneNumber: !phoneValidation(phoneNumber)\n                  });\n                }\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function phoneNumberWatcher(_x) {\n        return _phoneNumberWatcher.apply(this, arguments);\n      }\n\n      return phoneNumberWatcher;\n    }()\n    /**\n     * @method meterNumberWatcher\n     * @summary this method will do validation for each input on nomor meter form\n     * */\n\n  }, {\n    key: \"meterNumberWatcher\",\n    value: function () {\n      var _meterNumberWatcher = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(event) {\n        var value;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                value = event.target.value;\n                _context2.next = 3;\n                return this.setState({\n                  meterNumber: value\n                });\n\n              case 3:\n                if (value.length < 1 || meterValidation(value)) {\n                  this.setState({\n                    errorMeterNumber: false\n                  });\n                } else {\n                  this.setState({\n                    errorMeterNumber: true\n                  });\n                }\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function meterNumberWatcher(_x2) {\n        return _meterNumberWatcher.apply(this, arguments);\n      }\n\n      return meterNumberWatcher;\n    }()\n    /**\n     * @method getPriceList\n     * @summary get pricelist of electricity (id 6)\n     *\n     * */\n\n  }, {\n    key: \"getPriceList\",\n    value: function () {\n      var _getPriceList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return AuthNetworkCall('/product_type/6/products', 'get', this.props.showSnackbar);\n\n              case 2:\n                result = _context3.sent;\n                if (result) this.setState({\n                  priceList: result\n                });\n                this.setState({\n                  isLoadingPriceList: false\n                });\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function getPriceList() {\n        return _getPriceList.apply(this, arguments);\n      }\n\n      return getPriceList;\n    }()\n    /**\n     * @method inquiry\n     * @summary this method is dummy\n     */\n\n  }, {\n    key: \"inquiry\",\n    value: function () {\n      var _inquiry = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(priceId) {\n        var showSnackbar, _this$state, phoneNumber, meterNumber, errorPhoneNumber, errorMeterNumber, headers, data, result;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                showSnackbar = this.props.showSnackbar;\n                _this$state = this.state, phoneNumber = _this$state.phoneNumber, meterNumber = _this$state.meterNumber, errorPhoneNumber = _this$state.errorPhoneNumber, errorMeterNumber = _this$state.errorMeterNumber;\n\n                if (!(meterNumber === '')) {\n                  _context4.next = 6;\n                  break;\n                }\n\n                showSnackbar('Nomor meter belum di isi', 'error');\n                _context4.next = 22;\n                break;\n\n              case 6:\n                if (!(phoneNumber === '')) {\n                  _context4.next = 10;\n                  break;\n                }\n\n                showSnackbar('Nomor telepon belum di isi', 'error');\n                _context4.next = 22;\n                break;\n\n              case 10:\n                if (!(errorMeterNumber || errorPhoneNumber)) {\n                  _context4.next = 14;\n                  break;\n                }\n\n                showSnackbar('Masukkan nomor meter dan telepon dengan benar', 'error');\n                _context4.next = 22;\n                break;\n\n              case 14:\n                // do inquiry here\n                this.setState({\n                  isLoading: true\n                });\n                headers = {\n                  'Content-Type': 'application/json'\n                };\n                data = JSON.stringify({\n                  order_identifier: meterNumber,\n                  price_id: priceId,\n                  phone_number: phoneNumber\n                });\n                _context4.next = 19;\n                return AuthNetworkCall('/inquiry', 'post', this.props.showSnackbar, data, headers);\n\n              case 19:\n                result = _context4.sent;\n\n                if (result) {\n                  this.setState({\n                    displayContent: 2\n                  });\n                  this.setState({\n                    inquiryData: result\n                  });\n                }\n\n                this.setState({\n                  isLoading: false\n                });\n\n              case 22:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function inquiry(_x3) {\n        return _inquiry.apply(this, arguments);\n      }\n\n      return inquiry;\n    }()\n    /**\n     * @method addToCart\n     * @summary add selected item to cart by post using\n     * order_idenifier : idpel\n     *customer_id, and price_id\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: \"addToCart\",\n    value: function () {\n      var _addToCart = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var _this$state$inquiryDa, price_id, order_identifier, headers, data, result;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _this$state$inquiryDa = this.state.inquiryData, price_id = _this$state$inquiryDa.price_id, order_identifier = _this$state$inquiryDa.order_identifier;\n                this.setState({\n                  isLoading: true\n                });\n                headers = {\n                  'Content-Type': 'application/json'\n                };\n                data = JSON.stringify({\n                  price_id: price_id,\n                  order_identifier: order_identifier\n                });\n                _context5.next = 6;\n                return AuthNetworkCall('/cart', 'post', this.props.showSnackbar, data, headers);\n\n              case 6:\n                result = _context5.sent;\n\n                if (result) {\n                  Router.push('/keranjang');\n                }\n\n                this.setState({\n                  isLoading: false\n                });\n\n              case 9:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function addToCart() {\n        return _addToCart.apply(this, arguments);\n      }\n\n      return addToCart;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state2 = this.state,\n          errorMeterNumber = _this$state2.errorMeterNumber,\n          isLoading = _this$state2.isLoading,\n          isLoadingPriceList = _this$state2.isLoadingPriceList,\n          phoneNumber = _this$state2.phoneNumber,\n          meterNumber = _this$state2.meterNumber,\n          displayContent = _this$state2.displayContent,\n          errorPhoneNumber = _this$state2.errorPhoneNumber,\n          priceList = _this$state2.priceList,\n          inquiryData = _this$state2.inquiryData;\n      var content;\n\n      if (displayContent === 1) {\n        content = __jsx(\"div\", {\n          id: \"firstContent\"\n        }, __jsx(ButtonBack, {\n          id: \"btnBack\",\n          onClick: function onClick() {\n            return Router.back();\n          }\n        }), __jsx(Divider, null), __jsx(\"div\", {\n          className: \"margin-top-24 margin-btm-24\"\n        }, __jsx(\"p\", {\n          className: \"font-muli-18 bold margin-btm-16\"\n        }, \"Token Listrik\"), __jsx(TextField, {\n          id: \"meterNumberField\",\n          placeholder: \"contoh: 123456789123\",\n          fullWidth: true,\n          margin: \"dense\",\n          InputProps: {\n            disableUnderline: true\n          },\n          inputProps: {\n            maxLength: 12\n          },\n          label: \"Masukkan nomor meter Anda\",\n          variant: \"filled\",\n          color: \"primary\",\n          onChange: function onChange(event) {\n            return _this2.meterNumberWatcher(event);\n          },\n          value: meterNumber,\n          error: errorMeterNumber,\n          helperText: errorMeterNumber ? 'Dalam bentuk angka, 11 - 12 digit' : ''\n        }), __jsx(TextField, {\n          id: \"phoneNumberField\",\n          placeholder: \"contoh: 081234567891\",\n          fullWidth: true,\n          margin: \"dense\",\n          inputProps: {\n            maxLength: 13\n          },\n          label: \"Masukkan nomor handphone\",\n          variant: \"filled\",\n          color: \"primary\",\n          onChange: function onChange(event) {\n            return _this2.phoneNumberWatcher(event);\n          },\n          error: errorPhoneNumber,\n          helperText: errorPhoneNumber ? 'Nomor telepon 11 sampai 13 digit' : '',\n          value: phoneNumber,\n          InputProps: {\n            disableUnderline: true\n          }\n        })), __jsx(\"div\", {\n          className: \"additional-product-content\"\n        }, isLoadingPriceList ? __jsx(CircularProgress, {\n          style: {\n            position: 'relative',\n            left: '45%'\n          }\n        }) : priceList.map(function (item, index) {\n          return __jsx(ProductItem, {\n            id: \"item\".concat(index),\n            title: item.product_name,\n            desc: item.product_desc,\n            price: item.sell_price,\n            onClick: function onClick() {\n              return _this2.inquiry(item.id);\n            }\n          });\n        })));\n      } else if (displayContent === 2) {\n        content = __jsx(\"div\", {\n          id: \"secondContent\"\n        }, __jsx(ButtonBack, {\n          id: \"btnBack\",\n          onClick: function onClick() {\n            return _this2.setState({\n              displayContent: 1\n            });\n          }\n        }), __jsx(Divider, null), __jsx(Grid, {\n          container: true,\n          direction: \"row\",\n          justify: \"space-between\",\n          className: \"margin-top-16 txt-center-ver margin-btm-16\"\n        }, __jsx(Grid, null, __jsx(\"p\", {\n          className: \"font-muli-14 margin-btm-16\"\n        }, \"Nama pelanggan\"), __jsx(\"p\", {\n          className: \"font-muli-14 margin-btm-16\"\n        }, \"No Meter\"), __jsx(\"p\", {\n          className: \"font-muli-14 margin-btm-16\"\n        }, \"ID Pelanggan\"), __jsx(\"p\", {\n          className: \"font-muli-14 margin-btm-16\"\n        }, \"Daya\"), __jsx(\"p\", {\n          className: \"font-muli-14 margin-btm-16\"\n        }, \"No Handphone\")), __jsx(Grid, null, __jsx(\"p\", {\n          className: \"font-muli-14 bold txt-end margin-btm-16\"\n        }, inquiryData.data.subscriber_name), __jsx(\"p\", {\n          className: \"font-muli-14 bold txt-end margin-btm-16\"\n        }, inquiryData.data.material_number), __jsx(\"p\", {\n          className: \"font-muli-14 bold txt-end margin-btm-16\"\n        }, inquiryData.data.subscriber_id), __jsx(\"p\", {\n          className: \"font-muli-14 bold txt-end margin-btm-16\"\n        }, \"\".concat(inquiryData.data.subscriber_segmentation, \" / \").concat(inquiryData.data.power, \" Watt\")), __jsx(\"p\", {\n          className: \"font-muli-14 bold txt-end margin-btm-16\"\n        }, inquiryData.data.phone_number))), __jsx(\"div\", {\n          className: \"padding-16 common-border margin-btm-16\"\n        }, __jsx(\"p\", {\n          className: \"font-muli-14 bold\"\n        }, inquiryData.product_name), __jsx(\"p\", {\n          className: \"font-muli-12\"\n        }, getRupiah(inquiryData.amount))), __jsx(Divider, null), __jsx(\"div\", {\n          className: \" margin-btm-16\"\n        }), __jsx(\"p\", {\n          className: \"font-muli-14\"\n        }, \"* Ketika transaksi berhasil, kami akan mengirimkan token ke nomor handphone anda.\"), __jsx(AppBar, {\n          position: \"fixed\",\n          style: {\n            top: 'auto',\n            bottom: 0,\n            backgroundColor: '#fff'\n          }\n        }, __jsx(Toolbar, null, __jsx(ButtonMain, {\n          className: \"margin-btm-16\",\n          size: \"large\",\n          id: \"addToCart\",\n          color: \"primary\",\n          width: \"fullWidth\",\n          onClick: function onClick() {\n            return _this2.addToCart();\n          }\n        }, \"Tambahkan Ke Tagihan\"))));\n      }\n\n      return __jsx(\"div\", {\n        className: \"main-content\",\n        id: \"mainContent\"\n      }, content, __jsx(BlockDialog, {\n        isOpen: isLoading\n      }));\n    }\n  }]);\n\n  return TokenListrik;\n}(Component);\nvar mapDispatchToProps = {\n  showSnackbar: showSnackbar\n};\nexport default connect(null, mapDispatchToProps)(TokenListrik);","map":null,"metadata":{},"sourceType":"module"}