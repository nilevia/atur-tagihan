{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Router from 'next/router'; // material\n\nimport { Divider } from '@material-ui/core';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport { connect } from 'react-redux';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { TabPanel } from '../../components/global-component/TabPanel'; // component\\\n\nimport ButtonBack from '../../components/global-component/ButtonBack';\nimport { phoneReplace, phoneValidation } from '../../utils/Validator';\nimport ProductItem from '../../components/additional-product/ProductItem'; // redux\n\nimport { showSnackbar } from '../../redux/snackbar/action';\nimport { BlockDialog } from '../../components/global-component/BlockDialog';\nimport { AuthNetworkCall } from '../../utils/NetworkCall';\nexport var PulseAndData = /*#__PURE__*/function (_Component) {\n  _inherits(PulseAndData, _Component);\n\n  var _super = _createSuper(PulseAndData);\n\n  function PulseAndData(props) {\n    var _this;\n\n    _classCallCheck(this, PulseAndData);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      provider_logo: '',\n      errorPhoneNumber: false,\n      tabIndex: 0,\n      productList: [],\n      lastPrefix: '0000',\n      isLoading: false,\n      dialogOpen: false,\n      phoneNumber: ''\n    };\n    return _this;\n  }\n  /**\n   * @summary if apId == 7, then set index to paket data\n   */\n\n\n  _createClass(PulseAndData, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      document.body.style.background = 'white';\n\n      if (localStorage.getItem('apId') === '7') {\n        this.setState({\n          tabIndex: 1\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      document.body.style = null;\n    }\n    /**\n     * @method phoneNumberWatcher\n     * @summary this method will do validation for each input on phone number form\n     * */\n\n  }, {\n    key: \"phoneNumberWatcher\",\n    value: function () {\n      var _phoneNumberWatcher = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n        var value, _this$state, phoneNumber, lastPrefix, valuePrefix;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                value = event.target.value; // change input to match format\n\n                _context.next = 3;\n                return this.setState({\n                  phoneNumber: phoneReplace(value)\n                });\n\n              case 3:\n                _this$state = this.state, phoneNumber = _this$state.phoneNumber, lastPrefix = _this$state.lastPrefix;\n\n                if (phoneNumber.length >= 4) {\n                  // get the prefix\n                  valuePrefix = value.substring(0, 4); // get new price list if prefix is different\n\n                  if (valuePrefix !== lastPrefix) {\n                    this.setState({\n                      lastPrefix: valuePrefix\n                    });\n                    this.getPriceList(valuePrefix);\n                  } // phonumber length validation\n\n\n                  this.setState({\n                    errorPhoneNumber: !phoneValidation(phoneNumber)\n                  });\n                } // reset all\n\n\n                if (phoneNumber.length < 4) {\n                  this.setState({\n                    provider_logo: '',\n                    errorPhoneNumber: false,\n                    productList: [],\n                    lastPrefix: '0000'\n                  });\n                }\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function phoneNumberWatcher(_x) {\n        return _phoneNumberWatcher.apply(this, arguments);\n      }\n\n      return phoneNumberWatcher;\n    }()\n    /**\n     * @method getPriceList\n     * @summary get pricelist and operator logo by prefix\n     * if tab index 0 means pulsa (id 5)\n     * if tab index 1 means paket data (id 7)\n     *\n     * */\n\n  }, {\n    key: \"getPriceList\",\n    value: function () {\n      var _getPriceList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(prefix) {\n        var productId, result;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.setState({\n                  isLoading: true\n                });\n                productId = this.state.tabIndex === 0 ? 5 : 7;\n                _context2.next = 4;\n                return AuthNetworkCall(\"/product_type/\".concat(productId, \"/products?operator_prefix__starts_with=\").concat(prefix), 'get', this.props.showSnackbar);\n\n              case 4:\n                result = _context2.sent;\n\n                if (result) {\n                  this.mappingOperatorAndPrice(result);\n                }\n\n                this.setState({\n                  isLoading: false\n                });\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getPriceList(_x2) {\n        return _getPriceList.apply(this, arguments);\n      }\n\n      return getPriceList;\n    }()\n    /**\n     * @method mappingOperatorAndPrice\n     * @summary mapping product list to state and get provider logo price list found\n     * */\n\n  }, {\n    key: \"mappingOperatorAndPrice\",\n    value: function mappingOperatorAndPrice(productList) {\n      this.setState({\n        productList: productList\n      });\n\n      if (productList.length > 0) {\n        this.setState({\n          provider_logo: productList[0].operator_icon\n        });\n      } else {\n        this.props.showSnackbar('Daftar harga tidak ditemukan', 'error');\n      }\n    }\n    /**\n     * @summary this method is to set tab index and local storage based on tab index value\n     * then hit end point by last prefix\n     * use async and await so this will be not async\n     * */\n\n  }, {\n    key: \"onTabChange\",\n    value: function () {\n      var _onTabChange = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(newValue) {\n        var lastPrefix;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                lastPrefix = this.state.lastPrefix;\n                _context3.next = 3;\n                return this.setState({\n                  tabIndex: newValue\n                });\n\n              case 3:\n                localStorage.setItem('apId', newValue === 0 ? '5' : '7');\n                if (lastPrefix !== '0000') this.getPriceList(lastPrefix);\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function onTabChange(_x3) {\n        return _onTabChange.apply(this, arguments);\n      }\n\n      return onTabChange;\n    }()\n    /**\n     * @method addToCart\n     * @summary add selected item to cart by post using order_idenifier, customer_id, and price_id\n     * @param price_id\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: \"addToCart\",\n    value: function () {\n      var _addToCart = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(price_id) {\n        var headers, data, result;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!this.state.errorPhoneNumber) {\n                  _context4.next = 4;\n                  break;\n                }\n\n                showSnackbar('Masukkan nomor telepon dengan benar', 'error');\n                _context4.next = 12;\n                break;\n\n              case 4:\n                this.setState({\n                  dialogOpen: true\n                });\n                headers = {\n                  'Content-Type': 'application/json'\n                };\n                data = JSON.stringify({\n                  price_id: price_id,\n                  order_identifier: this.state.phoneNumber\n                });\n                _context4.next = 9;\n                return AuthNetworkCall('/cart', 'post', this.props.showSnackbar, data, headers);\n\n              case 9:\n                result = _context4.sent;\n\n                if (result) {\n                  Router.push('/keranjang');\n                }\n\n                this.setState({\n                  dialogOpen: false\n                });\n\n              case 12:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function addToCart(_x4) {\n        return _addToCart.apply(this, arguments);\n      }\n\n      return addToCart;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state2 = this.state,\n          tabIndex = _this$state2.tabIndex,\n          productList = _this$state2.productList,\n          isLoading = _this$state2.isLoading,\n          dialogOpen = _this$state2.dialogOpen,\n          errorPhoneNumber = _this$state2.errorPhoneNumber,\n          phoneNumber = _this$state2.phoneNumber;\n      var productItem = productList.length > 0 ? __jsx(\"div\", {\n        className: \"additional-product-content\"\n      }, productList.map(function (item) {\n        return __jsx(ProductItem, {\n          key: item.id,\n          title: item.product_name,\n          desc: item.product_desc,\n          price: item.sell_price,\n          onClick: function onClick() {\n            return _this2.addToCart(item.price_id);\n          }\n        });\n      })) : null;\n      var displayItem = isLoading ? __jsx(CircularProgress, {\n        style: {\n          position: 'absolute',\n          left: '47%',\n          top: '60%'\n        }\n      }) : productItem;\n      return __jsx(\"div\", {\n        className: \"main-content\",\n        id: \"mainContent\"\n      }, __jsx(ButtonBack, {\n        id: \"btnBack\",\n        onClick: function onClick() {\n          return Router.back();\n        }\n      }), __jsx(Divider, null), __jsx(\"div\", {\n        className: \"margin-top-24 margin-btm-8\"\n      }, __jsx(\"p\", {\n        className: \"font-muli-18 bold\"\n      }, \"Pulsa & Paket Data\"), __jsx(TextField, {\n        id: \"phoneNumberField\",\n        placeholder: \"contoh: 081234567891\",\n        fullWidth: true,\n        margin: \"normal\",\n        InputProps: {\n          endAdornment: __jsx(InputAdornment, {\n            position: \"end\"\n          }, __jsx(\"img\", {\n            src: this.state.provider_logo,\n            style: {\n              maxHeight: '18px'\n            }\n          }))\n        },\n        inputProps: {\n          maxLength: 13,\n          pattern: '[0-9]'\n        },\n        label: \"Masukkan no handphone\",\n        variant: \"filled\",\n        color: \"primary\",\n        onChange: function onChange(event) {\n          return _this2.phoneNumberWatcher(event);\n        },\n        error: errorPhoneNumber,\n        helperText: errorPhoneNumber ? 'Nomor telepon 11 sampai 13 digit' : '',\n        value: phoneNumber // type=\"number\"\n        // onPaste={(event) => this.getPriceList(event.clipboardData.getData('Text'))}\n        // onKeyDown={(event) => event.key === 'Enter'? console.log(\"asu\") : console.log(\"juju asu\")}\n\n      })), __jsx(Tabs, {\n        value: tabIndex,\n        indicatorColor: \"primary\",\n        onChange: function onChange(event, newValue) {\n          return _this2.onTabChange(newValue);\n        },\n        centered: true,\n        variant: \"fullWidth\"\n      }, __jsx(Tab, {\n        label: __jsx(\"span\", {\n          className: \"font-muli-14 bold\"\n        }, \"Pulsa\")\n      }), __jsx(Tab, {\n        label: __jsx(\"span\", {\n          className: \"font-muli-14 bold\"\n        }, \"Paket Data\")\n      })), __jsx(TabPanel, {\n        value: tabIndex,\n        index: 0\n      }, displayItem), __jsx(TabPanel, {\n        value: tabIndex,\n        index: 1\n      }, displayItem), __jsx(BlockDialog, {\n        isOpen: dialogOpen\n      }));\n    }\n  }]);\n\n  return PulseAndData;\n}(Component);\nvar mapDispatchToProps = {\n  showSnackbar: showSnackbar\n};\nexport default connect(null, mapDispatchToProps)(PulseAndData);","map":null,"metadata":{},"sourceType":"module"}