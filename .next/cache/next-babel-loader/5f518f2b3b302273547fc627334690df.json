{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Fragment, Component } from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport { clearSnackbar } from '../../redux/snackbar/action';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport { connect } from \"react-redux\";\n/**\n * @class GSnackbar\n * @summary this class is for global snackbar that will show up above layout page\n * so transition would be smooth\n * @param call using redux actions showSnackbar(message, {info or error} )\n * @returns {*}\n * @constructor\n */\n\nexport var GSnackbar = /*#__PURE__*/function (_Component) {\n  _inherits(GSnackbar, _Component);\n\n  var _super = _createSuper(GSnackbar);\n\n  function GSnackbar(props) {\n    var _this;\n\n    _classCallCheck(this, GSnackbar);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"handleClose\", function () {\n      var clearSnackbar = _this.props.clearSnackbar;\n      clearSnackbar();\n    });\n\n    _this.state = {};\n    return _this;\n  }\n\n  _createClass(GSnackbar, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props$Snackbar = this.props.Snackbar,\n          snackbarOpen = _this$props$Snackbar.snackbarOpen,\n          snackbarMessage = _this$props$Snackbar.snackbarMessage,\n          snackbarType = _this$props$Snackbar.snackbarType;\n      return __jsx(Fragment, null, __jsx(Snackbar, {\n        anchorOrigin: {\n          vertical: 'top',\n          horizontal: 'center'\n        },\n        open: snackbarOpen,\n        autoHideDuration: 3000,\n        onClose: function onClose() {\n          return _this2.handleClose();\n        },\n        \"aria-describedby\": \"client-snackbar\"\n      }, __jsx(MuiAlert, {\n        elevation: 20,\n        style: {\n          alignItems: 'center',\n          textAlign: 'center'\n        },\n        variant: \"filled\",\n        onClose: function onClose() {\n          return _this2.handleClose();\n        },\n        severity: snackbarType\n      }, snackbarMessage)));\n    }\n  }]);\n\n  return GSnackbar;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    Snackbar: state.Snackbar\n  };\n};\n\nvar mapDispatchToProps = {\n  clearSnackbar: clearSnackbar\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(GSnackbar);","map":null,"metadata":{},"sourceType":"module"}