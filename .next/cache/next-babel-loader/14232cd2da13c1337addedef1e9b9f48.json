{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\n/**\n * @summary this method is used to call flagr api with simple call\n * will return whether it enable or disable based on id given\n * @param id\n */\n\nexport function featureEnable(_x) {\n  return _featureEnable.apply(this, arguments);\n}\n\nfunction _featureEnable() {\n  _featureEnable = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(id) {\n    var enabled, BASE_URL, url;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            enabled = false; // const BASE_URL = getConfig().publicRuntimeConfig.NEXT_PUBLIC_API_FLAGR_URL;\n\n            BASE_URL = process.env.NEXT_PUBLIC_API_FLAGR_URL;\n            url = \"\".concat(BASE_URL, \"flags/\").concat(id);\n            _context.next = 5;\n            return axios.get(url).then(function (apiResponse) {\n              enabled = apiResponse.data.enabled;\n            })[\"catch\"](function () {\n              enabled = false;\n            });\n\n          case 5:\n            return _context.abrupt(\"return\", enabled);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _featureEnable.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module"}