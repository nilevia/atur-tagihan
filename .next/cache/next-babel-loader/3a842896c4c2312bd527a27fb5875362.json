{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Router from 'next/router'; // material\n\nimport { Divider } from '@material-ui/core';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport { connect } from 'react-redux';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { TabPanel } from '../../components/global-component/TabPanel'; // component\\\n\nimport ButtonBack from '../../components/global-component/ButtonBack';\nimport { phoneReplace, phoneValidation } from '../../utils/Validator';\nimport ProductItem from '../../components/additional-product/ProductItem'; // redux\n\nimport { showSnackbar } from '../../redux/snackbar/action';\nimport { BlockDialog } from '../../components/global-component/BlockDialog';\nimport { AuthNetworkCall } from '../../utils/NetworkCall';\nexport class PulseAndData extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      provider_logo: '',\n      errorPhoneNumber: false,\n      tabIndex: 0,\n      productList: [],\n      lastPrefix: '0000',\n      isLoading: false,\n      dialogOpen: false,\n      phoneNumber: ''\n    };\n  }\n  /**\n   * @summary if apId == 7, then set index to paket data\n   */\n\n\n  componentDidMount() {\n    document.body.style.background = 'white';\n\n    if (localStorage.getItem('apId') === '7') {\n      this.setState({\n        tabIndex: 1\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    document.body.style = null;\n  }\n  /**\n   * @method phoneNumberWatcher\n   * @summary this method will do validation for each input on phone number form\n   * */\n\n\n  async phoneNumberWatcher(event) {\n    const {\n      value\n    } = event.target; // change input to match format\n\n    await this.setState({\n      phoneNumber: phoneReplace(value)\n    });\n    const {\n      phoneNumber,\n      lastPrefix\n    } = this.state;\n\n    if (phoneNumber.length >= 4) {\n      // get the prefix\n      const valuePrefix = value.substring(0, 4); // get new price list if prefix is different\n\n      if (valuePrefix !== lastPrefix) {\n        this.setState({\n          lastPrefix: valuePrefix\n        });\n        this.getPriceList(valuePrefix);\n      } // phonumber length validation\n\n\n      this.setState({\n        errorPhoneNumber: !phoneValidation(phoneNumber)\n      });\n    } // reset all\n\n\n    if (phoneNumber.length < 4) {\n      this.setState({\n        provider_logo: '',\n        errorPhoneNumber: false,\n        productList: [],\n        lastPrefix: '0000'\n      });\n    }\n  }\n  /**\n   * @method getPriceList\n   * @summary get pricelist and operator logo by prefix\n   * if tab index 0 means pulsa (id 5)\n   * if tab index 1 means paket data (id 7)\n   *\n   * */\n\n\n  async getPriceList(prefix) {\n    this.setState({\n      isLoading: true\n    });\n    const productId = this.state.tabIndex === 0 ? 5 : 7;\n    const result = await AuthNetworkCall(`/product_type/${productId}/products?operator_prefix__starts_with=${prefix}`, 'get', this.props.showSnackbar);\n\n    if (result) {\n      this.mappingOperatorAndPrice(result);\n    }\n\n    this.setState({\n      isLoading: false\n    });\n  }\n  /**\n   * @method mappingOperatorAndPrice\n   * @summary mapping product list to state and get provider logo price list found\n   * */\n\n\n  mappingOperatorAndPrice(productList) {\n    this.setState({\n      productList\n    });\n\n    if (productList.length > 0) {\n      this.setState({\n        provider_logo: productList[0].operator_icon\n      });\n    } else {\n      this.props.showSnackbar('Daftar harga tidak ditemukan', 'error');\n    }\n  }\n  /**\n   * @summary this method is to set tab index and local storage based on tab index value\n   * then hit end point by last prefix\n   * use async and await so this will be not async\n   * */\n\n\n  async onTabChange(newValue) {\n    const {\n      lastPrefix\n    } = this.state;\n    await this.setState({\n      tabIndex: newValue\n    });\n    localStorage.setItem('apId', newValue === 0 ? '5' : '7');\n    if (lastPrefix !== '0000') this.getPriceList(lastPrefix);\n  }\n  /**\n   * @method addToCart\n   * @summary add selected item to cart by post using order_idenifier, customer_id, and price_id\n   * @param price_id\n   * @returns {Promise<void>}\n   */\n\n\n  async addToCart(price_id) {\n    if (this.state.errorPhoneNumber) {\n      showSnackbar('Masukkan nomor telepon dengan benar', 'error');\n    } else {\n      this.setState({\n        dialogOpen: true\n      });\n      const headers = {\n        'Content-Type': 'application/json'\n      };\n      const data = JSON.stringify({\n        price_id,\n        order_identifier: this.state.phoneNumber\n      });\n      const result = await AuthNetworkCall('/cart', 'post', this.props.showSnackbar, data, headers);\n\n      if (result) {\n        Router.push('/keranjang');\n      }\n\n      this.setState({\n        dialogOpen: false\n      });\n    }\n  }\n\n  render() {\n    const {\n      tabIndex,\n      productList,\n      isLoading,\n      dialogOpen,\n      errorPhoneNumber,\n      phoneNumber\n    } = this.state;\n    const productItem = productList.length > 0 ? __jsx(\"div\", {\n      className: \"additional-product-content\"\n    }, productList.map(item => __jsx(ProductItem, {\n      key: item.id,\n      title: item.product_name,\n      desc: item.product_desc,\n      price: item.sell_price,\n      onClick: () => this.addToCart(item.price_id)\n    }))) : null;\n    const displayItem = isLoading ? __jsx(CircularProgress, {\n      style: {\n        position: 'absolute',\n        left: '47%',\n        top: '60%'\n      }\n    }) : productItem;\n    return __jsx(\"div\", {\n      className: \"main-content\",\n      id: \"mainContent\"\n    }, __jsx(ButtonBack, {\n      id: \"btnBack\",\n      onClick: () => Router.back()\n    }), __jsx(Divider, null), __jsx(\"div\", {\n      className: \"margin-top-24 margin-btm-8\"\n    }, __jsx(\"p\", {\n      className: \"font-muli-18 bold\"\n    }, \"Pulsa & Paket Data\"), __jsx(TextField, {\n      id: \"phoneNumberField\",\n      placeholder: \"contoh: 081234567891\",\n      fullWidth: true,\n      margin: \"normal\",\n      InputProps: {\n        endAdornment: __jsx(InputAdornment, {\n          position: \"end\"\n        }, __jsx(\"img\", {\n          src: this.state.provider_logo,\n          style: {\n            maxHeight: '18px'\n          }\n        }))\n      },\n      inputProps: {\n        maxLength: 13,\n        pattern: '[0-9]'\n      },\n      label: \"Masukkan no handphone\",\n      variant: \"filled\",\n      color: \"primary\",\n      onChange: event => this.phoneNumberWatcher(event),\n      error: errorPhoneNumber,\n      helperText: errorPhoneNumber ? 'Nomor telepon 11 sampai 13 digit' : '',\n      value: phoneNumber // type=\"number\"\n      // onPaste={(event) => this.getPriceList(event.clipboardData.getData('Text'))}\n      // onKeyDown={(event) => event.key === 'Enter'? console.log(\"asu\") : console.log(\"juju asu\")}\n\n    })), __jsx(Tabs, {\n      value: tabIndex,\n      indicatorColor: \"primary\",\n      onChange: (event, newValue) => this.onTabChange(newValue),\n      centered: true,\n      variant: \"fullWidth\"\n    }, __jsx(Tab, {\n      label: __jsx(\"span\", {\n        className: \"font-muli-14 bold\"\n      }, \"Pulsa\")\n    }), __jsx(Tab, {\n      label: __jsx(\"span\", {\n        className: \"font-muli-14 bold\"\n      }, \"Paket Data\")\n    })), __jsx(TabPanel, {\n      value: tabIndex,\n      index: 0\n    }, displayItem), __jsx(TabPanel, {\n      value: tabIndex,\n      index: 1\n    }, displayItem), __jsx(BlockDialog, {\n      isOpen: dialogOpen\n    }));\n  }\n\n}\nconst mapDispatchToProps = {\n  showSnackbar\n};\nexport default connect(null, mapDispatchToProps)(PulseAndData);","map":null,"metadata":{},"sourceType":"module"}