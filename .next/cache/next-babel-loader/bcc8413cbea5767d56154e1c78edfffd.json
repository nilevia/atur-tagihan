{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Router from 'next/router'; // Material\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport CircularProgress from '@material-ui/core/CircularProgress'; // Redux\n\nimport { connect } from 'react-redux';\nimport Grid from '@material-ui/core/Grid';\nimport axios from 'axios';\nimport { showDialog, clearDialog } from '../redux/paymentMethod/action';\nimport { showSnackbar } from '../redux/snackbar/action'; // Component\n\nimport ButtonMain from './global-component/ButtonMain';\nimport { isNotUndefined } from '../utils/Validator';\nexport class ConfirmationDialogPaymentMethod extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: false\n    };\n  }\n\n  handleClose() {\n    this.props.clearDialog();\n  }\n\n  async createOrder(customerId, itemCartId, paymentMethodId, orderId) {\n    this.setState({\n      isLoading: true\n    });\n    const {\n      showSnackbar\n    } = this.props;\n    const BASE_URL = process.env.NEXT_PUBLIC_API_BASE_URL;\n    const url = `${BASE_URL}/order/atur_tagihan`;\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n    const data = JSON.stringify({\n      customer_id: parseInt(customerId, 10),\n      cart_id: itemCartId,\n      payment_method_id: paymentMethodId\n    });\n    await axios.post(url, data, {\n      headers\n    }).then(async apiResponse => {\n      const {\n        response\n      } = apiResponse.data;\n\n      if (response.code !== '000000') {\n        showSnackbar('Terjadi Gangguan', 'error');\n      } else {\n        Router.push(`/status-pembayaran/${orderId}`);\n      }\n\n      this.setState({\n        isLoading: false\n      });\n    }).catch(error => {\n      if (isNotUndefined(error.response)) {\n        const {\n          data\n        } = error.response;\n        showSnackbar(data.response.user_errors, 'error');\n      } else {\n        showSnackbar(error.toString(), 'error');\n      }\n\n      this.setState({\n        isLoading: false\n      });\n    });\n    this.handleClose();\n  }\n\n  render() {\n    const {\n      dialogOpen,\n      groupPayment,\n      paymentLogo,\n      paymentId,\n      customerId,\n      itemCartId,\n      orderId\n    } = this.props.PaymentMethod;\n    const {\n      isLoading\n    } = this.state;\n    return __jsx(Dialog, {\n      disableBackdropClick: true,\n      open: dialogOpen,\n      fullWidth: true,\n      maxWidth: \"xs\"\n    }, __jsx(DialogContent, null, __jsx(\"p\", {\n      className: \"font-muli-18 bold\"\n    }, \"Konfirmasi\"), __jsx(\"p\", {\n      className: \"font-muli-14 margin-btm-16\"\n    }, \"Apakah anda yakin ingin menggunakan :\"), __jsx(\"p\", {\n      className: \"font-muli-14 margin-btm-16\"\n    }, groupPayment), __jsx(\"img\", {\n      src: paymentLogo,\n      className: \"payment-method-diaglog-image margin-btm-32\"\n    }), isLoading ? __jsx(CircularProgress, {\n      style: {\n        position: 'sticky',\n        left: '47%'\n      }\n    }) : __jsx(Grid, {\n      container: true,\n      direction: \"row\",\n      justify: \"space-between\",\n      spacing: 2\n    }, __jsx(Grid, {\n      item: true,\n      xs: 6\n    }, __jsx(ButtonMain, {\n      id: \"btnClose\",\n      onClick: () => this.handleClose(),\n      color: \"secondary\",\n      width: \"fullWidth\"\n    }, \"Kembali\")), __jsx(Grid, {\n      item: true,\n      xs: 6\n    }, __jsx(ButtonMain, {\n      id: \"btnNext\",\n      onClick: () => this.createOrder(customerId, itemCartId, paymentId, orderId),\n      color: \"primary\",\n      width: \"fullWidth\"\n    }, \"Lanjutkan\")))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  PaymentMethod: state.PaymentMethod\n});\n\nconst mapDispatchToProps = {\n  showDialog,\n  clearDialog,\n  showSnackbar\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(ConfirmationDialogPaymentMethod);","map":null,"metadata":{},"sourceType":"module"}